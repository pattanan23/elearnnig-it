// C:\Users\atSine\Desktop\‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏û‡∏¥‡πÄ‡∏®‡∏©\Web\elearnnig-it\e_learning_it\lib\backend\server.js

// Your existing imports...
require('dotenv').config({ path: '.env' });
const express = require('express');
const { Pool } = require('pg');
const cors = require('cors');
const bcrypt = require('bcrypt');
const multer = require('multer');
const path = require('path');
const fs = require('fs');
const { v4: uuidv4 } = require('uuid');
const ffmpeg = require('fluent-ffmpeg');
const os = require('os');
const PDFDocument = require('pdfkit');
const nodemailer = require('nodemailer');

// Ensure ffmpeg paths are correct for your system
ffmpeg.setFfmpegPath('C:/ffmpeg/bin/ffmpeg.exe');
ffmpeg.setFfprobePath('C:/ffmpeg/bin/ffprobe.exe');

const app = express();
const port = process.env.PORT || 3006;
const UPLOAD_DIR = 'C:\\Users\\atSine\\Desktop\\Problem\\Web\\data';

// Middleware
app.use(cors());
app.use(express.json());
// üí° ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô hostname ‡πÄ‡∏õ‡πá‡∏ô IP Address ‡∏Ç‡∏≠‡∏á‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏à‡∏≤‡∏Å Emulator/Device)
// ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: app.use('/data', express.static('C:/Users/atSine/Desktop/‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏û‡∏¥‡πÄ‡∏®‡∏©/Web/data'));
app.use('/data', express.static(UPLOAD_DIR));
app.use('/data', express.static(path.join(__dirname, 'data')));

const pool = new Pool({
    user: process.env.DB_USER,
    host: process.env.DB_HOST,
    database: process.env.DB_DATABASE,
    password: process.env.DB_PASSWORD,
    port: parseInt(process.env.DB_PORT),
});


pool.connect((err, client, done) => {
    if (err) {
        console.error('Error connecting to the database:', err.stack);
        return;
    }
    console.log('Connected to PostgreSQL database successfully!');
    done();
});

const transporter = nodemailer.createTransport({
    host: 'smtp.gmail.com', // ‡πÉ‡∏ä‡πâ Gmail SMTP
    port: 465, // ‡∏û‡∏≠‡∏£‡πå‡∏ï‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö SSL
    secure: true, // ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô true ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö port 465
    auth: {
        user: process.env.EMAIL_USER, // ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á‡∏à‡∏≤‡∏Å .env
        pass: process.env.EMAIL_PASS, // App Password ‡∏à‡∏≤‡∏Å .env
    },
});

function generateOTP() {
    return Math.floor(10000 + Math.random() * 90000).toString();
}
async function sendOTPEmail(toEmail, otpCode) {
    const mailOptions = {
        from: process.env.EMAIL_USER,
        to: toEmail,
        subject: '‡∏£‡∏´‡∏±‡∏™ OTP ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô E-Learning IT',
        html: `
            <div style="font-family: Arial, sans-serif;">
                <h2 style="color: #4CAF50;">‡∏Å‡∏≤‡∏£‡∏£‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô</h2>
                <p>‡∏£‡∏´‡∏±‡∏™ OTP ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠:</p>
                <div style="font-size: 24px; font-weight: bold; color: #333; background-color: #f0f0f0; padding: 10px; display: inline-block; margin: 10px 0;">
                    ${otpCode}
                </div>
                <p>‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 10 ‡∏ô‡∏≤‡∏ó‡∏µ</p>
            </div>
        `,
    };

    try {
        await transporter.sendMail(mailOptions);
        console.log(`OTP email sent successfully to ${toEmail}`); // üí° SUCCESS: ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤‡∏™‡πà‡∏á‡∏à‡∏£‡∏¥‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        return true;
    } catch (error) {
        console.error(`üõë Error sending OTP email to ${toEmail}:`, error); // üõë FAILURE: ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏à‡∏£‡∏¥‡∏á‡∏Ç‡∏≠‡∏á SMTP
        return false;
    }
}


// Endpoint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö
app.post('/api/login', async (req, res) => {
    const { identifier, password } = req.body;
    try {
        if (!identifier || !password) {
            return res.status(400).json({ message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å Email/‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏¥‡∏™‡∏¥‡∏ï ‡πÅ‡∏•‡∏∞‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô' });
        }
        const query = `
            SELECT * FROM users
            WHERE email = $1 OR student_id = $2
        `;
        const values = [identifier, identifier];
        const result = await pool.query(query, values);
        const user = result.rows[0];
        if (!user) {
            return res.status(401).json({ message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö' });
        }
        console.log('User data from database:', user);
        if (!user.password_hash) {
            console.error('Error: User found but password field is missing or null.');
            return res.status(500).json({ message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå' });
        }
        const passwordMatch = await bcrypt.compare(password, user.password_hash);
        if (!passwordMatch) {
            return res.status(401).json({ message: '‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' });
        }
        return res.status(200).json({
            message: '‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
            user: {
                first_name: user.first_name,
                last_name: user.last_name,
                user_id: user.user_id.toString(),
                role: user.role
            }
        });
    } catch (error) {
        console.error('Error during login:', error);
        return res.status(500).json({ message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå' });
    }
});

app.post('/api/login-admin', async (req, res) => {
    const { identifier, password } = req.body;

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (!identifier || !password) {
        return res.status(400).json({ message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å Email/‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏¥‡∏™‡∏¥‡∏ï ‡πÅ‡∏•‡∏∞‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô' });
    }

    try {
        // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å email ‡∏´‡∏£‡∏∑‡∏≠ student_id (‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤ identifier ‡∏Ñ‡∏∑‡∏≠ user input)
        const userQuery = `
            SELECT 
                user_id, 
                password_hash, 
                role, 
                first_name, 
                last_name, 
                email,
                student_id
            FROM users 
            WHERE email = $1 OR student_id = $1;
        `;
        const result = await pool.query(userQuery, [identifier]);

        if (result.rows.length === 0) {
            // ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
            return res.status(401).json({ message: 'Email ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏¥‡∏™‡∏¥‡∏ï‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' });
        }

        const user = result.rows[0];
        const isPasswordValid = await bcrypt.compare(password, user.password_hash);

        if (!isPasswordValid) {
            // ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
            return res.status(401).json({ message: '‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' });
        }

        // ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà Flutter ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
        return res.status(200).json({
            message: '‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
            user: {
                user_id: user.user_id,
                email: user.email,
                student_id: user.student_id, // ‡πÉ‡∏™‡πà student_id ‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
                first_name: user.first_name,
                last_name: user.last_name,
                role: user.role // '‡∏ô‡∏¥‡∏™‡∏¥‡∏ï', '‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå', '‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•'
            }
        });

    } catch (error) {
        console.error('üõë ERROR during login API:', error);
        // ‡πÅ‡∏™‡∏î‡∏á Dialog Box ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡∏¥‡∏î Exception
        return res.status(500).json({ message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á' });
    }
});

// Endpoint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà
app.post('/api/users', async (req, res) => {
    const { first_name, last_name, email, password, role, student_id } = req.body;
    try {
        const saltRounds = 10;
        const password_hash = await bcrypt.hash(password, saltRounds);
        const insertUserQuery = `
            INSERT INTO users (first_name, last_name, email, password_hash, role, student_id, created_at)
            VALUES ($1, $2, $3, $4, $5, $6, NOW())
            RETURNING user_id, first_name, last_name, email, role, student_id, created_at;
        `;
        const values = [
            first_name,
            last_name,
            email,
            password_hash,
            role,
            student_id,
        ];
        const result = await pool.query(insertUserQuery, values);
        const newUser = result.rows[0];
        return res.status(201).json({
            message: "User created successfully",
            user: newUser
        });
    } catch (error) {
        console.error("Error creating user:", error);
        if (error.code === '23505') {
            if (error.constraint === 'users_email_key') {
                return res.status(409).json({ error: "‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß" });
            } else if (error.constraint === 'users_student_id_key') {
                return res.status(409).json({ error: `‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏¥‡∏™‡∏¥‡∏ï '${student_id}' ‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß` });
            }
        }
        return res.status(500).json({ error: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå" });
    }
});
// ‡πÉ‡∏ä‡πâ multer.memoryStorage() ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô RAM ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
const upload = multer({ storage: multer.memoryStorage() });

// **ENDPOINT ‡∏ó‡∏µ‡πà 1: ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£‡πÅ‡∏•‡∏∞‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û**
app.post('/api/courses', upload.single('name_image'), async (req, res) => {
    const { course_code, course_name, short_description, description, objective, user_id } = req.body;
    if (!user_id || !course_code) {
        return res.status(400).json({ message: 'User ID and Course Code are required.' });
    }

    try {
        const checkCourseCodeQuery = 'SELECT COUNT(*) FROM subject_master WHERE course_code = $1';
        const courseCodeExists = await pool.query(checkCourseCodeQuery, [course_code]);
        const count = parseInt(courseCodeExists.rows[0].count);

        if (count === 0) {
            return res.status(404).json({ message: '‡∏£‡∏´‡∏±‡∏™‡∏ß‡∏¥‡∏ä‡∏≤‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö' });
        }

        const query = `
            INSERT INTO courses (course_code, course_name, short_description, description, objective, user_id, upload_date)
            VALUES ($1, $2, $3, $4, $5, $6, NOW())
            RETURNING course_id;
        `;
        const values = [course_code, course_name, short_description, description, objective, user_id];
        const result = await pool.query(query, values);
        const courseId = result.rows[0].course_id;

        const courseFolderPath = path.join(UPLOAD_DIR, user_id.toString(), courseId.toString());
        const imageFolderPath = path.join(courseFolderPath, 'image');
        fs.mkdirSync(imageFolderPath, { recursive: true });

        let imageName = null;
        if (req.file) {
            imageName = `course_image${path.extname(req.file.originalname)}`;
            const imagePath = path.join(imageFolderPath, imageName);
            fs.writeFileSync(imagePath, req.file.buffer);
        }

        const updateCourseQuery = `
            UPDATE courses
            SET name_image = $1
            WHERE course_id = $2;
        `;
        await pool.query(updateCourseQuery, [imageName, courseId]);

        res.status(201).json({
            message: 'Course details uploaded successfully! You can now upload video lessons.',
            course_id: courseId,
        });
    } catch (error) {
        console.error('Error uploading course details:', error);
        res.status(500).json({ message: 'Internal server error', error: error.message });
    }
});

// **ENDPOINT ‡∏ó‡∏µ‡πà 2: ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡πÅ‡∏•‡∏∞ PDF ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ö‡∏ó‡πÄ‡∏£‡∏µ‡∏¢‡∏ô**
app.post('/api/upload-video', upload.fields([{ name: 'video' }, { name: 'pdf' }]), async (req, res) => {
    const { course_id, video_name, short_description } = req.body;
    const videoFile = req.files['video'] ? req.files['video'][0] : null;
    const pdfFile = req.files['pdf'] ? req.files['pdf'][0] : null;

    if (!course_id || !video_name || !videoFile) {
        return res.status(400).json({ message: 'Course ID, video name, and video file are required.' });
    }

    try {
        const courseQuery = 'SELECT user_id FROM courses WHERE course_id = $1';
        const courseResult = await pool.query(courseQuery, [course_id]);
        if (courseResult.rows.length === 0) {
            return res.status(404).json({ message: 'Course not found.' });
        }
        const userId = courseResult.rows[0].user_id;

        const countQuery = 'SELECT COUNT(*) FROM video_lessons WHERE course_id = $1';
        const countResult = await pool.query(countQuery, [course_id]);
        const lessonNumber = parseInt(countResult.rows[0].count) + 1;

        const lessonsFolderPath = path.join(UPLOAD_DIR, userId.toString(), course_id, 'lessons');
        const lessonFolder = path.join(lessonsFolderPath, `lesson_${lessonNumber}`);
        fs.mkdirSync(lessonFolder, { recursive: true });

        let videoFileName = null;
        if (videoFile) {
            videoFileName = `lesson_${lessonNumber}_vdo${path.extname(videoFile.originalname)}`;
            const videoPath = path.join(lessonFolder, videoFileName);
            fs.writeFileSync(videoPath, videoFile.buffer);
        }

        let pdfFileName = null;
        if (pdfFile) {
            pdfFileName = `lesson_${lessonNumber}_file${path.extname(pdfFile.originalname)}`;
            const pdfPath = path.join(lessonFolder, pdfFileName);
            fs.writeFileSync(pdfPath, pdfFile.buffer);
        }

        const query = `
            INSERT INTO video_lessons (course_id, video_name, short_description, video_path, pdf_path)
            VALUES ($1, $2, $3, $4, $5)
        `;
        const values = [course_id, video_name, short_description, videoFileName, pdfFileName];
        await pool.query(query, values);

        res.status(201).json({
            message: `Video lesson ${lessonNumber} uploaded successfully!`,
            video_path: videoFileName,
            pdf_path: pdfFileName,
        });
    } catch (error) {
        console.error('Error uploading video lesson:', error);
        res.status(500).json({ message: 'Internal server error', error: error.message });
    }
});


// Endpoint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á
app.get('/api/show_courses', async (req, res) => {
    try {
        const sql = `
        SELECT
          c.course_id,
          c.course_code,
          c.course_name,
          c.short_description,
          c.name_image,
          c.user_id,
          u.first_name,
          u.last_name
        FROM courses c
        JOIN users u ON c.user_id = u.user_id
        `;
        const result = await pool.query(sql);

        const courses = result.rows.map(row => {
            const image_url = row.name_image
                ? `http://${req.hostname}:${port}/data/${row.user_id}/${row.course_id}/image/${row.name_image}`
                : null;
            return {
                course_id: row.course_id.toString(),
                course_code: row.course_code,
                course_name: row.course_name,
                short_description: row.short_description,
                image_url: image_url,
                professor_name: `${row.first_name} ${row.last_name}`
            };
        });
        res.json(courses);
    } catch (error) {
        console.error('Error fetching courses:', error);
        res.status(500).json({ error: 'Database query failed' });
    }
});

// Endpoint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£‡∏ï‡∏≤‡∏° ID
app.get('/api/course/:courseId', async (req, res) => {
    try {
        const { courseId } = req.params;
        const query = `
            SELECT
                c.course_id,
                c.course_code,
                c.course_name,
                c.short_description,
                c.description,
                c.objective,
                c.name_image,
                c.user_id,
                u.first_name,
                u.last_name
            FROM courses c
            JOIN users u ON c.user_id = u.user_id
            WHERE c.course_id = $1;
        `;
        const result = await pool.query(query, [courseId]);

        if (result.rows.length === 0) {
            return res.status(404).json({ error: 'Course not found' });
        }
        const courseData = result.rows[0];

        const videoLessonsQuery = `
            SELECT lesson_id, video_name, short_description AS video_description, video_path, pdf_path
            FROM video_lessons
            WHERE course_id = $1
            ORDER BY lesson_id ASC;
        `;
        const videoLessonsResult = await pool.query(videoLessonsQuery, [courseId]);

        const videoLessons = videoLessonsResult.rows.map((lesson, index) => {
            const lessonNumber = index + 1;
            return {
                ...lesson,
                video_lesson_id: lesson.lesson_id.toString(),
                video_url: lesson.video_path ? `http://${req.hostname}:${port}/data/${courseData.user_id}/${courseId}/lessons/lesson_${lessonNumber}/${lesson.video_path}` : null,
                pdf_url: lesson.pdf_path ? `http://${req.hostname}:${port}/data/${courseData.user_id}/${courseId}/lessons/lesson_${lessonNumber}/${lesson.pdf_path}` : null,
            };
        });

        const imageUrl = courseData.name_image
            ? `http://${req.hostname}:${port}/data/${courseData.user_id}/${courseId}/image/${courseData.name_image}`
            : 'https://placehold.co/600x400.png';

        res.json({
            course_id: courseData.course_id,
            course_code: courseData.course_code,
            course_name: courseData.course_name,
            short_description: courseData.short_description,
            description: courseData.description || '',
            objective: courseData.objective || '',
            professor_name: `${courseData.first_name} ${courseData.last_name}`,
            image_url: imageUrl,
            lessons: videoLessons,
            user_id: courseData.user_id.toString(),
        });
    } catch (error) {
        console.error('Error fetching course details:', error);
        res.status(500).json({ error: 'Database query failed' });
    }
});


// Endpoint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ï‡∏≠‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≠‡∏£‡πå‡∏™
app.get('/api/course/:courseId/videos', async (req, res) => {
    try {
        const { courseId } = req.params;

        const courseQuery = `
            SELECT user_id, course_name
            FROM courses
            WHERE course_id = $1;
        `;
        const courseResult = await pool.query(courseQuery, [courseId]);

        if (courseResult.rows.length === 0) {
            return res.status(404).json({ error: 'Course not found' });
        }
        const courseData = courseResult.rows[0];
        const videoLessonsQuery = `
            SELECT lesson_id, video_name, short_description AS video_description, video_path, pdf_path
            FROM video_lessons
            WHERE course_id = $1
            ORDER BY lesson_id ASC;
        `;
        const videoLessonsResult = await pool.query(videoLessonsQuery, [courseId]);
        const videoLessons = videoLessonsResult.rows.map((lesson, index) => {
            const lessonNumber = index + 1;
            return {
                video_lesson_id: lesson.lesson_id.toString(),
                video_name: lesson.video_name,
                video_description: lesson.video_description,
                video_url: lesson.video_path ? `http://${req.hostname}:${port}/data/${courseData.user_id}/${courseId}/lessons/lesson_${lessonNumber}/${lesson.video_path}` : null,
                pdf_url: lesson.pdf_path ? `http://${req.hostname}:${port}/data/${courseData.user_id}/${courseId}/lessons/lesson_${lessonNumber}/${lesson.pdf_path}` : null,
            };
        });

        res.json({
            course_id: courseId,
            course_name: courseData.course_name,
            lessons: videoLessons,
        });

    } catch (error) {
        console.error('Error fetching course videos:', error);
        res.status(500).json({ error: 'Database query failed' });
    }
});

// **ENDPOINT ‡∏ó‡∏µ‡πà 3: ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠ (Video Progress)**
app.post('/api/save_progress', async (req, res) => {
    const {
        userId,
        courseId,
        lessonId,
        savedSeconds, // ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏î‡∏π‡∏Ñ‡πâ‡∏≤‡∏á‡πÑ‡∏ß‡πâ (‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)
        courseStatus // '‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ï‡πà‡∏≠' ‡∏´‡∏£‡∏∑‡∏≠ '‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÉ‡∏´‡∏°‡πà' ‡∏´‡∏£‡∏∑‡∏≠ '‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏à‡∏ö'
    } = req.body;

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
    if (!userId || !courseId || !lessonId || savedSeconds === undefined || !courseStatus) {
        return res.status(400).json({ message: 'Missing required progress data (userId, courseId, lessonId, savedSeconds, courseStatus).' });
    }

    console.log('Received progress data:', req.body);

    try {
        // ‡πÉ‡∏ä‡πâ ON CONFLICT ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡∏Å‡∏≤‡∏£ Upsert (Insert ‡∏´‡∏£‡∏∑‡∏≠ Update)
        const query = `
            INSERT INTO video_progress (user_id, course_id, lesson_id, saved_seconds, course_status, updated_at)
            VALUES ($1, $2, $3, $4, $5, NOW())
            ON CONFLICT (user_id, lesson_id) DO UPDATE
            SET 
                saved_seconds = EXCLUDED.saved_seconds,
                course_status = EXCLUDED.course_status,
                updated_at = NOW()
            RETURNING *;
        `;
        const values = [userId, courseId, lessonId, savedSeconds, courseStatus];

        console.log('Query values:', values);

        const result = await pool.query(query, values);

        console.log(`Progress saved/updated for User ${userId}, Lesson ${lessonId}: ${savedSeconds}s, Status: ${courseStatus}`);

        res.status(200).json({
            message: 'Video progress saved successfully.',
            progress: result.rows[0]
        });

    } catch (error) {
        console.error('üõë ERROR saving video progress:', error);
        if (error.code === '23503') {
            return res.status(404).json({ message: 'Course ID, Lesson ID, ‡∏´‡∏£‡∏∑‡∏≠ User ID ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (Foreign Key violation).', error: error.message });
        }
        res.status(500).json({ message: 'Internal server error during progress save. (Check console for full error)', error: error.message });
    }
});

// **ENDPOINT ‡∏ó‡∏µ‡πà 4: ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏ö‡∏ó‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏ (Get Specific Lesson Progress)**
// üí° ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÉ‡∏ä‡πâ Path Parameters ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á Lesson ID ‡∏à‡∏≤‡∏Å Flutter (‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà App ‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á)
app.get('/api/get_progress', async (req, res) => {
    const { userId, courseId, lessonId } = req.query; // üí° ‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å query parameter

    if (!userId || !courseId || !lessonId) {
        return res.status(400).json({ message: 'Missing userId, courseId, or lessonId.' });
    }

    try {
        const query = `
            SELECT saved_seconds AS "savedSeconds", course_status AS "courseStatus"
            FROM video_progress
            WHERE user_id = $1 AND course_id = $2 AND lesson_id = $3;
        `;
        const result = await pool.query(query, [userId, courseId, lessonId]);

        if (result.rows.length === 0) {
            // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ 0 ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            return res.status(404).json({ // üí° ‡∏Ñ‡∏∑‡∏ô 404 ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ Flutter ‡∏£‡∏π‡πâ‡∏ß‡πà‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢‡∏î‡∏π
                message: 'No progress found for this lesson.',
                savedSeconds: 0,
                courseStatus: '‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÉ‡∏´‡∏°‡πà'
            });
        }

        // üí° ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ
        res.status(200).json({
            message: 'Progress fetched successfully.',
            savedSeconds: result.rows[0].savedSeconds,
            courseStatus: result.rows[0].courseStatus
        });

    } catch (error) {
        console.error('üõë ERROR fetching video progress:', error);
        res.status(500).json({ message: 'Internal server error during progress fetch.', error: error.message });
    }
});

// **ENDPOINT ‡∏ó‡∏µ‡πà 5: ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≠‡∏£‡πå‡∏™ (Get Last Progress for Course Detail Page)**
// Route: GET /api/get_progress/:userId/:courseId
app.get('/api/get_progress/:userId/:courseId', async (req, res) => {
    const { userId, courseId } = req.params;

    if (!userId || !courseId) {
        return res.status(400).json({ message: 'Missing userId or courseId.' });
    }

    try {
        // üí° ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (‡∏ï‡∏≤‡∏° updated_at) ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏ô‡∏±‡πâ‡∏ô
        const query = `
            SELECT 
                lesson_id AS "lessonId", 
                saved_seconds AS "savedSeconds", 
                course_status AS "courseStatus"
            FROM video_progress
            WHERE user_id = $1 AND course_id = $2
            ORDER BY updated_at DESC
            LIMIT 1;
        `;
        const result = await pool.query(query, [userId, courseId]);

        if (result.rows.length === 0) {
            // üí° ‡∏Ñ‡∏∑‡∏ô 404 ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢‡∏î‡∏π‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏ô‡∏µ‡πâ‡πÄ‡∏•‡∏¢
            return res.status(404).json({
                message: 'No overall progress found for this course.'
            });
        }

        res.status(200).json({
            message: 'Last course progress fetched successfully.',
            progress: result.rows[0] // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ progress node ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
        });

    } catch (error) {
        console.error('üõë ERROR fetching last course progress:', error);
        res.status(500).json({ message: 'Internal server error during progress fetch.', error: error.message });
    }
});

// **ENDPOINT ‡∏ó‡∏µ‡πà 6: ‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏î‡∏π‡∏ö‡∏ó‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏£‡πå‡∏™**
// Route: GET /api/get_all_progress/:userId/:courseId
app.get('/api/get_all_progress/:userId/:courseId', async (req, res) => {
    const { userId, courseId } = req.params;

    if (!userId || !courseId) {
        return res.status(400).json({ message: 'Missing userId or courseId.' });
    }

    try {
        // üí° ‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡∏ó‡∏∏‡∏Å‡∏ö‡∏ó‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏ô‡∏µ‡πâ
        const query = `
            SELECT 
                lesson_id AS "lessonId", 
                course_status AS "courseStatus"
            FROM video_progress
            WHERE user_id = $1 AND course_id = $2;
        `;
        const result = await pool.query(query, [userId, courseId]);

        if (result.rows.length === 0) {
            return res.status(200).json([]); // ‡∏Ñ‡∏∑‡∏ô Array ‡πÄ‡∏õ‡∏•‡πà‡∏≤‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        }

        res.status(200).json(result.rows); // ‡∏Ñ‡∏∑‡∏ô Array ‡∏Ç‡∏≠‡∏á { lessonId, courseStatus }

    } catch (error) {
        console.error('üõë ERROR fetching all progress:', error);
        res.status(500).json({ message: 'Internal server error during progress fetch.', error: error.message });
    }
});

// **ENDPOINT ‡∏ó‡∏µ‡πà 7: ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å/‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ñ‡∏≠‡∏£‡πå‡∏™ (Rate Course) - [FINAL FIX]**
app.post('/api/rate_course', async (req, res) => {
    const { courseId, userId, rating, review_text } = req.body;

    // ‚úÖ [STEP 1] ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤ (Parsing)
    const courseIdInt = parseInt(courseId);
    const userIdInt = parseInt(userId);
    const ratingValue = parseInt(rating);

    if (isNaN(courseIdInt) || isNaN(userIdInt) || isNaN(ratingValue) || ratingValue < 1 || ratingValue > 5) {
        return res.status(400).json({ message: 'Invalid input data.' });
    }
    const finalReviewText = (review_text === '' || review_text === undefined || review_text === null) ? null : review_text;

    try {
        // 1. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å/‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (Upsert ‡πÉ‡∏ô course_ratings)
        const upsertRatingQuery = `
            INSERT INTO course_ratings (course_id, user_id, rating_value, review_text)
            VALUES ($1, $2, $3, $4)
            ON CONFLICT (course_id, user_id) DO UPDATE
            SET 
                rating_value = EXCLUDED.rating_value,
                review_text = EXCLUDED.review_text;
        `;
        await pool.query(upsertRatingQuery, [courseIdInt, userIdInt, ratingValue, finalReviewText]);

        // 2. ‚úÖ [CRITICAL FIX] ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏´‡πâ Progress Record ‡∏Ç‡∏≠‡∏á Lesson ‡πÅ‡∏£‡∏Å‡∏ñ‡∏π‡∏Å‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô '‡∏ó‡∏ö‡∏ó‡∏ß‡∏ô'
        // ¬† ¬†‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Lesson ID ‡πÅ‡∏£‡∏Å‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏Å‡πà‡∏≠‡∏ô
        const firstLessonQuery = `
            SELECT lesson_id 
            FROM video_lessons 
            WHERE course_id = $1 
            ORDER BY lesson_id ASC 
            LIMIT 1;
        `;
        const firstLessonResult = await pool.query(firstLessonQuery, [courseIdInt]);

        if (firstLessonResult.rows.length === 0) {
            // ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ö‡∏ó‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÄ‡∏•‡∏¢
            return res.status(500).json({ message: 'Course has no lessons, cannot set review status.' });
        }

        const firstLessonId = firstLessonResult.rows[0].lesson_id;

        // 3. ‡πÉ‡∏ä‡πâ Upsert ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á/‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Progress Record ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Lesson ‡πÅ‡∏£‡∏Å
        const progressUpsertQuery = `
            INSERT INTO video_progress (user_id, course_id, lesson_id, saved_seconds, course_status, updated_at)
            VALUES ($1, $2, $3, 0, '‡∏ó‡∏ö‡∏ó‡∏ß‡∏ô', NOW())
            ON CONFLICT (user_id, lesson_id) DO UPDATE
            SET 
                course_status = '‡∏ó‡∏ö‡∏ó‡∏ß‡∏ô',
                saved_seconds = 0, -- ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡πá‡∏ô 0 ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡πÇ‡∏´‡∏°‡∏î‡∏ó‡∏ö‡∏ó‡∏ß‡∏ô
                updated_at = NOW(); 
        `;
        // üí° ‡πÉ‡∏ä‡πâ firstLessonId ‡πÄ‡∏õ‡πá‡∏ô target ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ ON CONFLICT ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
        await pool.query(progressUpsertQuery, [userIdInt, courseIdInt, firstLessonId]);

        console.log(`Rating saved/updated. Progress for Lesson ${firstLessonId} set to '‡∏ó‡∏ö‡∏ó‡∏ß‡∏ô'.`);

        // 4. ‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏•‡∏±‡∏ö
        res.status(200).json({
            message: 'Course rating saved/updated and progress set for review successfully.',
        });

    } catch (error) {
        console.error('üõë ERROR during rate_course transaction:', error);
        res.status(500).json({ message: 'Internal server error during rating process.', error: error.message });
    }
});

// **ENDPOINT ‡∏ó‡∏µ‡πà 8: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ**
app.get('/api/check_user_rating/:userId/:courseId', async (req, res) => {
    const { userId, courseId } = req.params;
    const userIdInt = parseInt(userId);
    const courseIdInt = parseInt(courseId);

    if (isNaN(userIdInt) || isNaN(courseIdInt)) {
        return res.status(400).json({ message: 'Invalid User ID or Course ID.' });
    }

    try {
        const query = `
            SELECT rating_value
            FROM course_ratings
            WHERE user_id = $1 AND course_id = $2;
        `;
        const result = await pool.query(query, [userIdInt, courseIdInt]);

        if (result.rows.length > 0) {
            // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á ratings ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÅ‡∏•‡πâ‡∏ß
            return res.status(200).json({
                message: 'User has rated this course.',
                rating: result.rows[0].rating_value
            });
        } else {
            // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á ratings ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
            return res.status(404).json({ message: 'User has not rated this course yet.' });
        }
    } catch (error) {
        console.error('Error checking user rating:', error);
        res.status(500).json({ message: 'Internal server error' });
    }
});

// ‚úÖ Certificates Endpoints
// 1. ENDPOINT: ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏∏‡∏í‡∏¥‡∏ö‡∏±‡∏ï‡∏£ (GET /api/certificates/:userId/:courseId)
app.get('/api/certificates/:userId/:courseId', async (req, res) => {
    const { userId, courseId } = req.params;

    try {
        // üéØ [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç SQL Query] ‡πÉ‡∏ä‡πâ c.course_detail ‡∏´‡∏£‡∏∑‡∏≠ c.course_code ‡πÄ‡∏õ‡πá‡∏ô subject_name
        const courseQuery = `
            SELECT 
                c.course_name, 
                c.course_code AS subject_name, /* üëà [‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç] ‡πÉ‡∏ä‡πâ course_code ‡∏´‡∏£‡∏∑‡∏≠ course_detail ‡πÅ‡∏•‡πâ‡∏ß‡∏ï‡∏±‡πâ‡∏á Alias ‡πÄ‡∏õ‡πá‡∏ô subject_name */
                u.first_name, u.last_name,
                cert.issue_date
            FROM courses c
            JOIN users u ON u.user_id = $1  
            LEFT JOIN certificates cert ON cert.user_id = $1 AND cert.course_id = $2
            WHERE c.course_id = $2;
        `;

        const result = await pool.query(courseQuery, [userId, courseId]);

        if (result.rows.length === 0) {
            return res.status(404).json({ message: 'Certificate data not found.' });
        }

        const data = result.rows[0];

        // üéØ [‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç: ‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà]
        let formattedIssueDate = '';
        const issueDateValue = data.issue_date;

        if (issueDateValue) {
            const dateObj = new Date(issueDateValue);

            // üí° [FIX] ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Date object ‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡∏°‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (is not NaN)
            if (dateObj instanceof Date && !isNaN(dateObj.getTime())) {
                // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô YYYY-MM-DD format (‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡∏ó‡∏µ‡πà Flutter Parse ‡πÑ‡∏î‡πâ)
                formattedIssueDate = dateObj.toISOString().split('T')[0];
            }
            // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô Invalid Date ‡∏à‡∏∞‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏õ ‡∏ó‡∏≥‡πÉ‡∏´‡πâ formattedIssueDate ‡πÄ‡∏õ‡πá‡∏ô ''
        }

        // ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö CertificateData.fromJson ‡πÉ‡∏ô Frontend
        const responseData = {
            firstName: data.first_name,
            lastName: data.last_name || '',
            subjectName: data.subject_name || data.course_name || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£‡∏¢‡πà‡∏≠‡∏¢',
            courseName: data.course_name,
            issueDate: formattedIssueDate, // ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß (YYYY-MM-DD ‡∏´‡∏£‡∏∑‡∏≠ '')
        };

        res.json(responseData);

    } catch (error) {
        // ‡πÉ‡∏´‡πâ Error 500 ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà Database Syntax Error ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ Frontend ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏á‡πà‡∏≤‡∏¢‡∏Ç‡∏∂‡πâ‡∏ô
        console.error('üõë ERROR fetching certificate data:', error);
        res.status(500).json({ message: 'Internal server error while fetching certificate.' });
    }
});

// 2. ENDPOINT: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ß‡∏∏‡∏í‡∏¥‡∏ö‡∏±‡∏ï‡∏£ (GET /api/get_certificate/:userId/:courseId)
app.get('/api/get_certificate/:userId/:courseId', async (req, res) => {
    try {
        const { userId, courseId } = req.params;

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏≤‡∏£‡∏≤‡∏á certificates
        const query = `
            SELECT user_id 
            FROM certificates 
            WHERE user_id = $1 AND course_id = $2;
        `;

        const result = await pool.query(query, [userId, courseId]);

        if (result.rows.length > 0) {
            // ‡∏û‡∏ö‡∏ß‡∏∏‡∏í‡∏¥‡∏ö‡∏±‡∏ï‡∏£: isGenerated ‡πÄ‡∏õ‡πá‡∏ô true
            return res.status(200).json({
                isGenerated: true
            });
        }

        // ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ß‡∏∏‡∏í‡∏¥‡∏ö‡∏±‡∏ï‡∏£: isGenerated ‡πÄ‡∏õ‡πá‡∏ô false (‡πÉ‡∏ä‡πâ 200 ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ Flutter ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏á‡πà‡∏≤‡∏¢)
        return res.status(200).json({
            isGenerated: false
        });

    } catch (error) {
        console.error('üõë ERROR checking certificate status:', error);
        res.status(500).json({ message: 'Internal server error during certificate status check.' });
    }
});

// 3. ENDPOINT: ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏Å‡∏ß‡∏∏‡∏í‡∏¥‡∏ö‡∏±‡∏ï‡∏£ (POST /api/certificates/save)
app.post('/api/certificates/save', async (req, res) => {
    // issueDate ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô String 'YYYY-MM-DD'
    const { userId, courseId, issueDate } = req.body;

    if (!userId || !courseId || !issueDate) {
        return res.status(400).json({ message: 'Missing required data (userId, courseId, issueDate)' });
    }

    try {
        // ‡πÉ‡∏ä‡πâ ON CONFLICT DO NOTHING ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡∏à‡∏∞‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏î Error
        // ‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å issueDate ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
        const query = `
            INSERT INTO certificates (user_id, course_id, issue_date) 
            VALUES ($1, $2, $3)
            ON CONFLICT (user_id, course_id) DO NOTHING;
        `;

        const result = await pool.query(query, [userId, courseId, issueDate]);

        if (result.rowCount === 0) {
            // ‡∏ñ‡πâ‡∏≤ rowCount ‡πÄ‡∏õ‡πá‡∏ô 0 ‡πÅ‡∏õ‡∏•‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ä‡∏ô‡∏Å‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£ INSERT ‡πÉ‡∏´‡∏°‡πà
            return res.status(200).json({ message: "Issue date already saved." });
        }

        res.status(200).json({ message: "Issue date saved successfully." });

    } catch (error) {
        console.error('üõë ERROR saving issue date:', error);
        res.status(500).json({ message: 'Internal server error during issue date save.' });
    }
});

// 2. ENDPOINT: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î PDF (GET /api/certificates/pdf/:userId/:courseId)
app.get('/api/certificates/pdf/:userId/:courseId', async (req, res) => {
    const { userId, courseId } = req.params;

    // üí° Path ‡∏à‡∏∂‡∏á‡∏ä‡∏µ‡πâ‡πÑ‡∏õ‡∏ó‡∏µ‡πà Subfolder 'font' ‡πÅ‡∏•‡∏∞ 'assets'
    const FONT_REGULAR_PATH = path.join(__dirname, 'font/Sarabun-Regular.ttf');
    const FONT_BOLD_PATH = path.join(__dirname, 'font/Sarabun-ExtraBold.ttf');

    // üéØ [NEW] ‡∏Å‡∏≥‡∏´‡∏ô‡∏î Path ‡∏Ç‡∏≠‡∏á‡πÇ‡∏•‡πÇ‡∏Å‡πâ (‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏•‡∏∞ Path ‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á)
    const LOGO_PATH = path.join(__dirname, 'font/logo4.png'); // ‚ö†Ô∏è ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Path ‡∏ô‡∏µ‡πâ!

    // 2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ü‡∏≠‡∏ô‡∏ï‡πå ‡πÅ‡∏•‡∏∞‡∏Å‡∏≥‡∏´‡∏ô‡∏î Fallback
    const FONT_AVAILABLE = fs.existsSync(FONT_REGULAR_PATH) && fs.existsSync(FONT_BOLD_PATH);

    // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ä‡∏∑‡πà‡∏≠‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏ä‡πâ
    const NORMAL_FONT = FONT_AVAILABLE ? FONT_REGULAR_PATH : 'Times-Roman';
    const BOLD_FONT = FONT_AVAILABLE ? FONT_BOLD_PATH : 'Times-Bold';

    if (!FONT_AVAILABLE) {
        console.warn('‚ö†Ô∏è WARN: Thai font files not found. Using standard Times-Roman. Thai text may display incorrectly.');
    }

    try {
        // 1. ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏∏‡∏í‡∏¥‡∏ö‡∏±‡∏ï‡∏£‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡πÉ‡∏ä‡πâ JOIN ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
        const query = `
            SELECT
                u.first_name,
                u.last_name,
                c.course_name,
                c.course_code AS subject_name,
                cert.issue_date
            FROM
                certificates cert
            JOIN
                users u ON cert.user_id = u.user_id
            JOIN
                courses c ON cert.course_id = c.course_id
            WHERE
                cert.user_id = $1 AND cert.course_id = $2;
        `;
        const result = await pool.query(query, [userId, courseId]);

        if (result.rowCount === 0) {
            return res.status(404).json({ message: 'Certificate data not found.' });
        }

        const data = result.rows[0];
        const fullName = `${data.first_name} ${data.last_name}`;

        // ‡πÅ‡∏õ‡∏•‡∏á issue_date ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏î‡πâ (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô PDF)
        let issueDateFormatted = '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà';
        if (data.issue_date) {
            const dateObj = new Date(data.issue_date);
            // üí° [FIX for Invalid Date] ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö
            if (dateObj instanceof Date && !isNaN(dateObj.getTime())) {
                // ‡πÉ‡∏ä‡πâ Intl.DateTimeFormat ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
                const dateFormatter = new Intl.DateTimeFormat('th-TH', {
                    day: 'numeric',
                    month: 'long',
                    year: 'numeric'
                });
                issueDateFormatted = dateFormatter.format(dateObj);
            }
        }

        // 2. ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Response Headers ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö PDF Download
        res.setHeader('Content-Type', 'application/pdf');
        res.setHeader('Content-Disposition', `attachment; filename="certificate_${userId}_${courseId}.pdf"`);

        // 3. ‡∏™‡∏£‡πâ‡∏≤‡∏á PDF Document
        const doc = new PDFDocument({
            layout: 'landscape', // ‡πÅ‡∏ô‡∏ß‡∏ô‡∏≠‡∏ô
            size: 'A4',
            autoFirstPage: false
        });

        // Pipe PDF output ‡πÑ‡∏õ‡∏ó‡∏µ‡πà Response stream ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
        doc.pipe(res);
        doc.addPage();

        const PADDING = 50;
        const DOC_WIDTH = doc.page.width;
        const DOC_HEIGHT = doc.page.height;
        const primaryColor = '#2E7D32';
        const IMAGE_HEIGHT = 80; // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡∏Ç‡∏≠‡∏á‡πÇ‡∏•‡πÇ‡∏Å‡πâ

        // --- ‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏Å‡πÅ‡∏ï‡πà‡∏á (Border) ---
        doc.rect(PADDING / 2, PADDING / 2, DOC_WIDTH - PADDING, DOC_HEIGHT - PADDING)
            .lineWidth(5)
            .stroke(primaryColor);

        // --- ‡∏™‡πà‡∏ß‡∏ô‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤ ---

        let nextY = 80; // ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Y ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏•‡πÇ‡∏Å‡πâ

        if (fs.existsSync(LOGO_PATH)) {
            const imageX = (DOC_WIDTH - IMAGE_HEIGHT) / 2;
            doc.image(LOGO_PATH, imageX, nextY, {
                height: IMAGE_HEIGHT
            });

            // üí° [FIX] ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á Y ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏±‡∏î‡πÑ‡∏õ ‡πÇ‡∏î‡∏¢‡∏ö‡∏ß‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡∏Ç‡∏≠‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°
            nextY += IMAGE_HEIGHT + 30; // 80 (‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô) + 80 (‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡∏£‡∏π‡∏õ) + 30 (‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á) = 190

            // ‡πÉ‡∏ä‡πâ doc.moveDown() ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ Cursor ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö doc.text() ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
            doc.y = nextY;
            doc.moveDown(0.5); // moveDown 0.5 ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ cursor ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏±‡∏î‡πÑ‡∏õ

        } else {
            // ‡∏Å‡∏£‡∏ì‡∏µ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏•‡πÇ‡∏Å‡πâ (Fallback)
            doc.font(BOLD_FONT)
                .fontSize(48)
                .fillColor(primaryColor)
                .text('‡∏ß‡∏∏‡∏í‡∏¥‡∏ö‡∏±‡∏ï‡∏£', PADDING, nextY, { align: 'center', width: DOC_WIDTH - PADDING * 2 });
            doc.moveDown(0.5);
            nextY = doc.y; // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï nextY ‡∏ï‡∏≤‡∏°‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á Cursor ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        }

        // 2. ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á (‡∏õ‡∏Å‡∏ï‡∏¥)
        doc.font(NORMAL_FONT)
            .fontSize(20)
            .fillColor('#333333')
            .text('‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏ô‡∏µ‡∏¢‡∏ö‡∏±‡∏ï‡∏£‡∏ô‡∏µ‡πâ‡πÉ‡∏´‡πâ‡πÑ‡∏ß‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏ß‡πà‡∏≤', { align: 'center' });

        doc.moveDown(0.5);

        // 3. ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏ß‡∏∏‡∏í‡∏¥‡∏ö‡∏±‡∏ï‡∏£ (‡∏ï‡∏±‡∏ß‡∏´‡∏ô‡∏≤)
        doc.font(BOLD_FONT)
            .fontSize(36)
            .fillColor(primaryColor)
            .text(fullName, { align: 'center' });

        doc.moveDown(0.5);

        // 4. ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏ö‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£ (‡∏õ‡∏Å‡∏ï‡∏¥)
        doc.font(NORMAL_FONT)
            .fontSize(20)
            .fillColor('#333333')
            .text('‡πÑ‡∏î‡πâ‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏ö‡∏£‡∏°‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ú‡∏•‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£', { align: 'center' });

        doc.moveDown(0.5);

        // 5. ‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£ (‡∏ï‡∏±‡∏ß‡∏´‡∏ô‡∏≤)
        doc.font(BOLD_FONT)
            .fontSize(28)
            .fillColor(primaryColor)
            .text(data.course_name, { align: 'center' });

        doc.moveDown(0.2);

        // 6. ‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£‡∏¢‡πà‡∏≠‡∏¢ (‡∏õ‡∏Å‡∏ï‡∏¥)
        doc.font(NORMAL_FONT)
            .fontSize(20)
            .fillColor(primaryColor)
            .text(`(${data.subject_name})`, { align: 'center' });

        doc.moveDown(2);

        // 7. ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏Å‡∏ß‡∏∏‡∏í‡∏¥‡∏ö‡∏±‡∏ï‡∏£ (‡∏õ‡∏Å‡∏ï‡∏¥)
        doc.font(NORMAL_FONT)
            .fontSize(20)
            .fillColor('#333333')
            .text(`‡πÉ‡∏´‡πâ‡πÑ‡∏ß‡πâ ‡∏ì ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ${issueDateFormatted}`, { align: 'center' });

        doc.moveDown(3);

        // ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô PDF
        doc.end();

    } catch (error) {
        console.error('üõë ERROR generating certificate PDF:', error);
        res.status(500).json({ message: 'Internal server error during PDF generation.', details: error.message });
    }
});

app.get('/api/certificates/:userId', async (req, res) => {
    const userId = req.params.userId;

    // üí° LOGGING: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ API ‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ
    console.log(`[API] Attempting to fetch certificates for User ID: ${userId}`);

    try {
        // üéØ [SQL Query] (‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÉ‡∏ô DB ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì)
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏≤‡∏£‡∏≤‡∏á "certificates" ‡πÅ‡∏•‡∏∞ "courses" ‡∏™‡∏∞‡∏Å‡∏î‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
        const certificateQuery = `
            SELECT 
                cert.course_id, 
                c.course_code, 
                c.course_name, 
                c.course_code AS subject_name, /* ‡πÉ‡∏ä‡πâ course_code ‡πÄ‡∏õ‡πá‡∏ô subject_name */
                TO_CHAR(cert.issue_date, 'YYYY-MM-DD') AS issue_date 
            FROM 
                certificates cert  
            JOIN 
                courses c ON cert.course_id = c.course_id 
            WHERE 
                cert.user_id = $1
            ORDER BY 
                cert.issue_date DESC;
        `;

        const result = await pool.query(certificateQuery, [userId]);

        // üí° LOGGING: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Query ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏Å‡∏µ‡πà‡πÅ‡∏ñ‡∏ß
        console.log(`[API Success] Fetched ${result.rows.length} certificates for user ${userId}`);

        return res.status(200).json(result.rows);

    } catch (error) {
        // üõë LOGGING: ‡∏î‡∏±‡∏Å‡∏à‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î (‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô)
        console.error('üõë FATAL ERROR fetching user certificates (500 Error Cause):', error.message);
        console.error('SQL State:', error.code); // ‡∏û‡∏¥‡∏°‡∏û‡πå SQL Error Code (‡πÄ‡∏ä‡πà‡∏ô 42P01: relation does not exist)

        // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° 500 ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ
        return res.status(500).json({
            message: 'Internal server error while fetching certificates.',
            error: error.message
        });
    }
});

// ‚úÖ ENDPOINT 2: ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ß‡∏∏‡∏í‡∏¥‡∏ö‡∏±‡∏ï‡∏£‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÉ‡∏ö (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö CertificatePage)
app.get('/api/certificates/:userId/:courseId', async (req, res) => {
    const { userId, courseId } = req.params;
    console.log(`[API] Attempting to fetch details for User ID: ${userId}, Course ID: ${courseId}`);

    try {
        const detailQuery = `
            SELECT 
                c.course_name, 
                c.course_code AS subject_name, 
                u.first_name, 
                u.last_name,
                TO_CHAR(cert.issue_date, 'YYYY-MM-DD') AS issue_date
            FROM 
                courses c
            JOIN 
                certificates cert ON cert.course_id = c.course_id 
            JOIN
                users u ON u.user_id = cert.user_id
            WHERE 
                cert.user_id = $1 AND cert.course_id = $2;
        `;

        const result = await pool.query(detailQuery, [userId, courseId]);

        if (result.rows.length === 0) {
            console.warn(`[API Warning] Certificate details not found for user ${userId} and course ${courseId}`);
            return res.status(404).json({ message: 'Certificate data not found.' });
        }

        const data = result.rows[0];
        console.log(`[API Success] Fetched details for ${data.first_name}`);

        const responseData = {
            firstName: data.first_name,
            lastName: data.last_name || '',
            subjectName: data.subject_name || data.course_name || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£‡∏¢‡πà‡∏≠‡∏¢',
            courseName: data.course_name,
            issueDate: data.issue_date,
        };

        res.json(responseData);

    } catch (error) {
        console.error('üõë FATAL ERROR fetching certificate details:', error.message);
        res.status(500).json({ message: 'Internal server error while fetching certificate details.' });
    }
});


// ENDPOINT: ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ï‡∏≤‡∏° ID (GET /api/users/:userId)
app.get('/api/users/:userId', async (req, res) => {
    const { userId } = req.params;

    // üí° [Step 1] ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á userId
    const userIdInt = parseInt(userId);
    if (isNaN(userIdInt)) {
        return res.status(400).json({ message: 'Invalid User ID format.' });
    }

    try {
        // üí° [Step 2] Query ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á users
        // ‡∏î‡∏∂‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞ field ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô ‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏° password_hash
        const query = `
            SELECT 
                user_id, 
                first_name, 
                last_name, 
                email, 
                role, 
                student_id
            FROM users
            WHERE user_id = $1
        `;

        const result = await pool.query(query, [userIdInt]);
        const user = result.rows[0];

        if (!user) {
            // üí° [Step 3] ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
            return res.status(404).json({ message: `User with ID ${userId} not found.` });
        }

        // üí° [Step 4] ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö JSON
        return res.status(200).json(user);

    } catch (error) {
        console.error('üõë ERROR fetching user profile:', error);
        return res.status(500).json({ message: 'Internal server error while fetching user profile.', error: error.message });
    }
});

// ‚úÖ Reports Endpoints
app.post('/api/reports', async (req, res) => {
    const { userId, category, reportMess } = req.body;
    try {
        if (!userId || !category || !reportMess) {
            return res.status(400).json({ message: 'User ID, category, and message are required.' });
        }
        const insertReportQuery = `
            INSERT INTO reports (user_id, category, report_mess)
            VALUES ($1, $2, $3)
            RETURNING *;
        `;
        const result = await pool.query(insertReportQuery, [userId, category, reportMess]);
        res.status(201).json({ message: 'Report submitted successfully.', report: result.rows[0] });
    } catch (error) {
        console.error('Error submitting report:', error);
        res.status(500).json({ message: 'Internal server error', error: error.message });
    }
});

// ‚úÖ User Profile Endpoint (Existing)
app.get('/api/user-professor/:userId', async (req, res) => {
    const userId = parseInt(req.params.userId); // üí° [Step 1] ‡∏î‡∏∂‡∏á userId
    try {
        // üí° [Step 2] Query ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å users table ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ user_id
        const userQuery = 'SELECT user_id, first_name, last_name, email, role, student_id FROM users WHERE user_id = $1';
        const result = await pool.query(userQuery, [userId]);
        const user = result.rows[0];

        if (!user) {
            // üí° [Step 3] ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
            return res.status(404).json({ message: `User with ID ${userId} not found.` });
        }

        // üí° [Step 4] ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö JSON
        return res.status(200).json(user);

    } catch (error) {
        console.error('üõë ERROR fetching user profile:', error);
        return res.status(500).json({ message: 'Internal server error while fetching user profile.', error: error.message });
    }
});


// **ENDPOINT ‡∏ó‡∏µ‡πà 9: ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå (‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ) ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤ Profile ‡∏Ç‡∏≠‡∏á‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå)**
app.get('/api/professor/courses/:userId', async (req, res) => {
    const userId = parseInt(req.params.userId);
    // ‡∏î‡∏∂‡∏á port ‡∏à‡∏≤‡∏Å environment variable ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤ default
    const port = process.env.PORT || 3006;
    const hostname = req.hostname; // ‡πÉ‡∏ä‡πâ hostname ‡∏à‡∏≤‡∏Å request (‡πÄ‡∏ä‡πà‡∏ô localhost)

    try {
        // üí° ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÄ‡∏û‡∏¥‡πà‡∏° name_image ‡πÅ‡∏•‡∏∞ JOIN users ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå ‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ WHERE clause ‡∏Å‡∏£‡∏≠‡∏á‡∏î‡πâ‡∏ß‡∏¢ user_id
        const coursesQuery = `
            SELECT 
                c.course_id,
                c.course_name,
                c.course_code,
                c.name_image,
                c.user_id,
                u.first_name,
                u.last_name
            FROM courses c
            JOIN users u ON c.user_id = u.user_id 
            WHERE c.user_id = $1; 
        `;
        const result = await pool.query(coursesQuery, [userId]);

        if (result.rows.length === 0) {
            // ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡πÉ‡∏î ‡πÜ ‡∏à‡∏∞‡∏™‡πà‡∏á Array ‡πÄ‡∏õ‡∏•‡πà‡∏≤‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ
            return res.status(200).json([]);
        }

        // üí° ‡πÄ‡∏û‡∏¥‡πà‡∏°: ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á image_url ‡πÅ‡∏•‡∏∞ professor_name
        const courses = result.rows.map(row => {
            const imageUrl = row.name_image
                ? `http://${hostname}:${port}/data/${row.user_id}/${row.course_id}/image/${row.name_image}`
                : 'https://placehold.co/300x150/505050/FFFFFF?text=IT+Course'; // ‡∏†‡∏≤‡∏û‡∏™‡∏≥‡∏£‡∏≠‡∏á

            return {
                course_id: row.course_id.toString(),
                course_code: row.course_code,
                course_name: row.course_name,
                image_url: imageUrl, // ‡∏ä‡∏∑‡πà‡∏≠ key ‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ó‡∏µ‡πà ProfessorCourse.fromJson ‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á
                professor_name: `${row.first_name} ${row.last_name}`
            };
        });

        // ‡∏™‡πà‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏ó‡∏µ‡πà‡∏û‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ
        return res.status(200).json(courses);
    } catch (error) {
        console.error('üõë ERROR fetching professor courses:', error);
        return res.status(500).json({
            message: 'Internal server error: Cannot fetch professor courses.',
            error: error.message
        });
    }
});

// 1. GET /api/reports/pending
app.get('/api/reports/pending', async (req, res) => {
    try {
        // *** ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÉ‡∏ä‡πâ pool.query ‡πÅ‡∏ó‡∏ô db.query ***
        const result = await pool.query(` 
            SELECT 
                report_id, 
                user_id, 
                category, 
                report_mess,
                status
            FROM public.reports
            WHERE status IS NULL OR status = '‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£' OR status = 'Pending'
            ORDER BY report_id ASC
        `);

        // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ
        res.status(200).json(result.rows);
    } catch (err) {
        console.error('Error fetching pending reports:', err);
        // ‡∏Å‡∏≤‡∏£ Log ‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á Error ‡∏ó‡∏µ‡πà‡πÅ‡∏ó‡πâ‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏ô Console ‡∏Ç‡∏≠‡∏á Server
        res.status(500).json({ message: 'Internal Server Error' });
    }
});

// 2. PUT /api/reports/:reportId/resolve
app.put('/api/reports/:reportId/resolve', async (req, res) => {
    const reportId = req.params.reportId;
    const { status } = req.body; // ‡∏£‡∏±‡∏ö status ('‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô') ‡∏à‡∏≤‡∏Å Flutter

    if (status !== '‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô') {
        return res.status(400).json({ message: 'Invalid status provided' });
    }

    try {
        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ï‡∏≤‡∏£‡∏≤‡∏á reports
        const updateReportQuery = `
            UPDATE public.reports
            SET status = $1
            WHERE report_id = $2
            RETURNING *;
        `;

        // *** ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÉ‡∏ä‡πâ pool.query ‡πÅ‡∏ó‡∏ô db.query ***
        const result = await pool.query(updateReportQuery, [status, reportId]);

        if (result.rowCount === 0) {
            return res.status(404).json({ message: 'Report not found' });
        }

        // ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        res.status(200).json({ message: `Report ${reportId} resolved successfully`, report: result.rows[0] });

    } catch (err) {
        console.error('Error resolving report:', err);
        res.status(500).json({ message: 'Internal Server Error' });
    }
});

// 3. GET /api/users - ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
app.get('/api/users-admin', async (req, res) => {
    try {
        // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£: ‡∏ä‡∏∑‡πà‡∏≠, ‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•, ‡∏≠‡∏µ‡πÄ‡∏°‡∏•, ‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏¥‡∏™‡∏¥‡∏ï, ‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó
        const query = `
            SELECT 
                user_id, first_name, last_name, email, student_id, role
            FROM 
                public.users
            ORDER BY
                user_id; 
        `;

        const result = await pool.query(query);

        res.status(200).json(result.rows);
    } catch (err) {
        console.error('Error fetching all users:', err);
        res.status(500).json({ message: 'Internal Server Error' });
    }
});

// **ENDPOINT: PUT /api/users-admin/:userId (Update user)**
app.put('/api/users-admin/:userId', async (req, res) => {
    // 1. ‡∏£‡∏±‡∏ö ID ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å URL Parameter ‡πÅ‡∏•‡∏∞‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
    const userId = parseInt(req.params.userId, 10);

    // 2. ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Body
    const { first_name, last_name, email, student_id, role } = req.body;

    // 3. ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ student_id ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á (String ‡∏ß‡πà‡∏≤‡∏á -> NULL)
    const finalStudentId = (student_id === '' || student_id === undefined || student_id === null)
        ? null
        : student_id;

    // 3.5 ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö User ID ‡∏ó‡∏µ‡πà‡πÅ‡∏õ‡∏•‡∏á‡πÅ‡∏•‡πâ‡∏ß
    if (isNaN(userId)) {
        return res.status(400).json({ message: 'User ID ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á ID ‡∏°‡∏≤' });
    }

    try {
        // 4. ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á SQL ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        const query = `
            UPDATE public.users
            SET 
                first_name = $1,
                last_name = $2,
                email = $3,
                student_id = $4,
                role = $5
            WHERE 
                user_id = $6
            RETURNING user_id;
        `;

        // 5. ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        const values = [first_name, last_name, email, finalStudentId, role, userId];
        const result = await pool.query(query, values);

        // 6. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÅ‡∏ñ‡∏ß‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ñ‡∏π‡∏Å‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if (result.rowCount === 0) {
            return res.status(404).json({ message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç' });
        }

        // 7. ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        res.status(200).json({ message: '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' });

    } catch (err) {
        console.error('Error updating user:', err);

        // üö® ‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç CRITICAL: ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Unique Constraint Violation (Error Code: 23505)
        if (err.code === '23505') {
            let field = '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•';
            if (err.constraint === 'users_email_key') {
                field = '‡∏≠‡∏µ‡πÄ‡∏°‡∏•';
            } else if (err.constraint === 'users_student_id_key') {
                field = '‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏¥‡∏™‡∏¥‡∏ï';
            }
            return res.status(409).json({
                message: `${field} ‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏£‡∏∞‡∏ö‡∏∏‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏ä‡πâ ${field} ‡∏≠‡∏∑‡πà‡∏ô`
            });
        }

        // ‡∏™‡πà‡∏á Error ‡∏ó‡∏µ‡πà‡πÅ‡∏ó‡πâ‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å Postgres ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ
        const errorMessage = err.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏Ç‡∏ì‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•';
        res.status(500).json({ message: errorMessage });
    }
});

// ‡πÄ‡∏™‡πâ‡∏ô API: GET /api/courses-admin
app.get('/api/courses-admin', async (req, res) => {
    try {
        const query = `
            SELECT 
                c.course_id, 
                c.course_code, 
                c.course_name,              
                c.user_id AS instructor_id, 
                u.email, 
                u.first_name || ' ' || u.last_name AS instructor_name 
            FROM courses c
            LEFT JOIN users u ON c.user_id = u.user_id 
            ORDER BY c.course_id DESC;
        `;
        const result = await pool.query(query);
        res.status(200).json(result.rows);
    } catch (err) {
        // ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° Error ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ‡πÉ‡∏ô console.error
        console.error('Error fetching courses:', err);
        res.status(500).json({ message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≠‡∏£‡πå‡∏™' });
    }
});


// 2. PUT: ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≠‡∏£‡πå‡∏™ (Update Course)
app.put('/api/courses-admin/:courseId', async (req, res) => {
    const courseId = req.params.courseId;
    // ‡∏£‡∏±‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞ course_code
    const { course_code } = req.body;

    if (!course_code) {
        return res.status(400).json({ message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏ß‡∏¥‡∏ä‡∏≤' });
    }

    try {
        // Query ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏Ñ‡πà course_code
        const query = `
            UPDATE courses
            SET 
                course_code = $1     
            WHERE course_id = $2
            RETURNING course_id;
        `;

        const values = [course_code, courseId]; // ‡πÉ‡∏ä‡πâ‡πÅ‡∏Ñ‡πà course_code ‡πÅ‡∏•‡∏∞ courseId
        const result = await pool.query(query, values);

        if (result.rowCount === 0) {
            return res.status(404).json({ message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç' });
        }

        res.status(200).json({ message: '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' });

    } catch (err) {
        console.error('Error updating course:', err);

        // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Unique Constraint Violation
        if (err.code === '23505') {
            let field = '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•';
            if (err.constraint === 'courses_course_code_key') {
                field = '‡∏£‡∏´‡∏±‡∏™‡∏ß‡∏¥‡∏ä‡∏≤';
            }
            return res.status(409).json({
                message: `${field} ‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏£‡∏∞‡∏ö‡∏∏‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏ä‡πâ ${field} ‡∏≠‡∏∑‡πà‡∏ô`
            });
        }

        res.status(500).json({ message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≠‡∏£‡πå‡∏™' });
    }
});

// 3. GET: ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Dropdown (Teacher List)
app.get('/api/teachers', async (req, res) => {
    try {
        const query = `
            SELECT user_id, first_name || ' ' || last_name AS name
            FROM users
            WHERE role = '‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå'
            ORDER BY name;
        `;
        const result = await pool.query(query);
        res.status(200).json(result.rows);
    } catch (err) {
        console.error('Error fetching teachers:', err);
        res.status(500).json({ message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå' });
    }
});

// 1. ENDPOINT: ‡∏£‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏£‡∏´‡∏±‡∏™ OTP ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
app.post('/api/password/request_reset', async (req, res) => {
    const { identifier } = req.body; // ‡∏£‡∏±‡∏ö Email ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏¥‡∏™‡∏¥‡∏ï

    if (!identifier) {
        return res.status(400).json({ message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å Email ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏¥‡∏™‡∏¥‡∏ï' });
    }

    try {
        // 1. ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å identifier
        const userQuery = `
            SELECT user_id, email, first_name
            FROM users 
            WHERE email = $1 OR student_id = $1;
        `;
        const userResult = await pool.query(userQuery, [identifier]);

        if (userResult.rows.length === 0) {
            // ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
            return res.status(404).json({ message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö' });
        }

        const user = userResult.rows[0];
        const otpCode = generateOTP();
        // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ 10 ‡∏ô‡∏≤‡∏ó‡∏µ
        const expirationTime = new Date(Date.now() + 10 * 60 * 1000);

        // 2. ‡∏•‡∏ö OTP ‡πÄ‡∏Å‡πà‡∏≤‡∏Ç‡∏≠‡∏á User ‡∏ô‡∏µ‡πâ (‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏õ‡∏°)
        await pool.query('DELETE FROM password_resets WHERE user_id = $1', [user.user_id]);

        // 3. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å OTP ‡πÉ‡∏´‡∏°‡πà‡∏•‡∏á‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        const insertOtpQuery = `
            INSERT INTO password_resets (user_id, otp_code, expires_at)
            VALUES ($1, $2, $3);
        `;
        await pool.query(insertOtpQuery, [user.user_id, otpCode, expirationTime]);

        // 4. *** ‡∏™‡πà‡∏ß‡∏ô‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏à‡∏£‡∏¥‡∏á ***
        const emailSent = await sendOTPEmail(user.email, otpCode);

        if (!emailSent) {
            // ‡∏ñ‡πâ‡∏≤‡∏™‡πà‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á 500 ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
            return res.status(500).json({
                message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏• OTP (‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö App Password ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Ç‡∏≠‡∏á Server)'
            });
        }

        // 5. ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö
        res.status(200).json({
            message: '‡∏™‡πà‡∏á‡∏£‡∏´‡∏±‡∏™ OTP ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì'
        });

    } catch (error) {
        console.error('üõë ERROR during password reset request:', error);
        res.status(500).json({ message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏Ç‡∏ì‡∏∞‡∏£‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô' });
    }
});

// 2. ENDPOINT: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö OTP ‡πÅ‡∏•‡∏∞‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà
app.post('/api/password/reset', async (req, res) => {
    const { identifier, otp_code, new_password } = req.body;

    if (!identifier || !otp_code || !new_password) {
        return res.status(400).json({ message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô: Email/‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏¥‡∏™‡∏¥‡∏ï, ‡∏£‡∏´‡∏±‡∏™ OTP, ‡πÅ‡∏•‡∏∞‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà' });
    }

    // ‡πÉ‡∏ä‡πâ Transaction ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏•‡∏∞‡∏•‡∏ö‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô
    const client = await pool.connect();

    try {
        await client.query('BEGIN'); // ‡πÄ‡∏£‡∏¥‡πà‡∏° Transaction

        // 1. ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å identifier ‡πÅ‡∏•‡∏∞‡∏î‡∏∂‡∏á user_id
        const userQuery = 'SELECT user_id FROM users WHERE email = $1 OR student_id = $1;';
        const userResult = await client.query(userQuery, [identifier]);

        if (userResult.rows.length === 0) {
            await client.query('COMMIT');
            return res.status(404).json({ message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏' });
        }

        const userId = userResult.rows[0].user_id;

        // 2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö OTP: ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà ‡πÅ‡∏•‡∏∞‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ (expires_at > NOW())
        const otpCheckQuery = `
            SELECT id
            FROM password_resets
            WHERE user_id = $1
              AND otp_code = $2
              AND expires_at > NOW();
        `;
        const otpResult = await client.query(otpCheckQuery, [userId, otp_code]);

        if (otpResult.rows.length === 0) {
            await client.query('COMMIT');
            return res.status(401).json({ message: '‡∏£‡∏´‡∏±‡∏™ OTP ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡πâ‡∏ß' });
        }

        // 3. ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà
        const saltRounds = 10;
        const newPasswordHash = await bcrypt.hash(new_password, saltRounds);

        // 4. ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á users
        const updatePasswordQuery = `
            UPDATE users
            SET password_hash = $1
            WHERE user_id = $2;
        `;
        await client.query(updatePasswordQuery, [newPasswordHash, userId]);

        // 5. ‡∏•‡∏ö OTP ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á password_resets
        const otpId = otpResult.rows[0].id;
        await client.query('DELETE FROM password_resets WHERE id = $1', [otpId]);

        // 6. Commit Transaction: ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        await client.query('COMMIT');

        res.status(200).json({ message: '‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' });

    } catch (error) {
        await client.query('ROLLBACK'); // Rollback: ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏´‡∏≤‡∏Å‡∏°‡∏µ Error
        console.error('üõë ERROR during password reset process:', error);
        res.status(500).json({ message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏Ç‡∏ì‡∏∞‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô' });
    } finally {
        client.release(); // ‡∏Ñ‡∏∑‡∏ô Client ‡∏™‡∏π‡πà Pool
    }
});

app.get('/api/courses/:courseId', async (req, res) => {
    const { courseId } = req.params;

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á courseId ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤
    if (!courseId || isNaN(parseInt(courseId))) {
        return res.status(400).json({ message: '‡∏£‡∏´‡∏±‡∏™‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' });
    }

    const client = await pool.connect();
    try {
        const query = `
    SELECT 
        course_id, 
        course_code, 
        course_name, 
        short_description, 
        description, 
        objective, 
    FROM courses 
    WHERE course_id = $1
`;

        const result = await client.query(query, [courseId]);

        if (result.rows.length === 0) {
            // ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç: ‡∏Ñ‡∏∑‡∏ô 404 ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£‡∏Ç‡∏∂‡πâ‡∏ô 404 ‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏´‡∏≤ Route ‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠
            return res.status(404).json({ message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•' });
        }

        res.status(200).json(result.rows[0]);

    } catch (error) {
        console.error("Error fetching course details:", error);
        res.status(500).json({ message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£' });
    } finally {
        client.release();
    }
});


app.put('/api/courses/:courseId', async (req, res) => {
    const { courseId } = req.params;
    const {
        course_code,
        course_name,
        short_description,
        description,
        objective
    } = req.body;

    // üí° ‡∏Ñ‡∏ß‡∏£‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô req.body ‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠

    const client = await pool.connect();
    try {
        const updateQuery = `
            UPDATE courses
            SET 
                course_code = $1,
                course_name = $2,
                short_description = $3,
                description = $4,
                objective = $5
            WHERE 
                course_id = $6
            RETURNING *;
        `;

        const values = [
            course_code,
            course_name,
            short_description,
            description,
            objective,
            courseId
        ];

        const result = await client.query(updateQuery, values);

        if (result.rows.length === 0) {
            return res.status(404).json({ message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç' });
        }

        res.status(200).json({
            message: '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
            course: result.rows[0]
        });

    } catch (error) {
        console.error("Error updating course details:", error);
        res.status(500).json({ message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£' });
    } finally {
        client.release();
    }
});

// ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå
app.listen(port, () => {
    console.log(`Server is running on port ${port}`);
});
