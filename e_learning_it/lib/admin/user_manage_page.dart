// lib/AdminUserManagementPage.dart

import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';
import 'package:e_learning_it/admin/error_dialog_page.dart'; // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö path ‡∏ß‡πà‡∏≤‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
import 'navbar_admin.dart'; 
import 'drawer_admin.dart'; 

// **NOTE:** ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏î‡πâ‡∏ß‡∏¢ Base URL ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
const String API_BASE_URL = 'http://localhost:3006/api'; 

class UserManagementPage extends StatefulWidget {
  final String userName;
  final String userId;

  const UserManagementPage({
    super.key,
    required this.userName,
    required this.userId,
  });

  @override
  State<UserManagementPage> createState() => _UserManagementPageState();
}

class _UserManagementPageState extends State<UserManagementPage> {
  List<dynamic> _users = [];
  bool _isLoading = true;

  // üö® ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
  final List<String> _roleOptions = [
    '‡∏ô‡∏¥‡∏™‡∏¥‡∏ï', 
    '‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å', 
    '‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå', 
  ];

  @override
  void initState() {
    super.initState();
    _fetchUsers();
  }

  // -----------------------------------------------------
  // 1. API: FETCH ALL USERS
  // -----------------------------------------------------
  Future<void> _fetchUsers() async {
    setState(() {
      _isLoading = true;
    });

    try {
      final url = Uri.parse('$API_BASE_URL/users-admin'); // API ‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
      final response = await http.get(url);

      if (response.statusCode == 200) {
        final List<dynamic> fetchedUsers = json.decode(response.body);
        setState(() {
          _users = fetchedUsers;
        });
      } else {
        // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Error response
        String errorMessage = '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: Status Code ${response.statusCode}';
        try {
            if (response.body.isNotEmpty) {
                final responseBody = json.decode(response.body);
                errorMessage = responseBody['message'] ?? errorMessage;
            }
        } catch (_) {
            errorMessage += '. Response body was not readable JSON.';
        }
        _showErrorDialog(errorMessage);
      }
    } catch (e) {
      _showErrorDialog(
        '‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÑ‡∏î‡πâ: $e',
      );
    } finally {
      setState(() {
        _isLoading = false;
      });
    }
  }

  // -----------------------------------------------------
  // 2. UI: BUILD METHOD (‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á)
  // -----------------------------------------------------
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      // ‡πÉ‡∏ä‡πâ Navbar/Drawer ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡∏Å‡∏±‡∏ö AdminMainPage
      appBar: NavbarAdminPage(
        userName: widget.userName,
        userId: widget.userId,
      ),
      drawer: DrawerAdminPage(
        userName: widget.userName,
        userId: widget.userId,
      ),
      body: _isLoading
          ? const Center(child: CircularProgressIndicator())
          : _users.isEmpty
              ? const Center(
                  child: Text('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ',
                      style: TextStyle(fontSize: 18, color: Colors.grey)),
                )
              : SingleChildScrollView(
                  scrollDirection: Axis.vertical,
                  child: SingleChildScrollView(
                    scrollDirection: Axis.horizontal,
                    child: _buildDataTable(),
                  ),
                ),
    );
  }

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á DataTable ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
  Widget _buildDataTable() {
    return DataTable(
      columnSpacing: 20.0,
      columns: const [
        DataColumn(label: Text('‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•', style: TextStyle(fontWeight: FontWeight.bold))),
        DataColumn(label: Text('‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏¥‡∏™‡∏¥‡∏ï', style: TextStyle(fontWeight: FontWeight.bold))),
        DataColumn(label: Text('‡∏≠‡∏µ‡πÄ‡∏°‡∏•', style: TextStyle(fontWeight: FontWeight.bold))),
        DataColumn(label: Text('‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó', style: TextStyle(fontWeight: FontWeight.bold))),
        DataColumn(label: Text('‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£', style: TextStyle(fontWeight: FontWeight.bold))),
      ],
      rows: _users.map<DataRow>((user) {
        final fullName = '${user['first_name']} ${user['last_name']}';
        return DataRow(
          cells: [
            DataCell(Text(fullName)),
            DataCell(Text(user['student_id'] ?? '-')),
            DataCell(Text(user['email'])),
            DataCell(Text(user['role'])),
            DataCell(
              ElevatedButton(
                onPressed: () => _showEditDialog(user),
                style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.orange, // ‡∏õ‡∏∏‡πà‡∏°‡∏™‡∏µ‡∏™‡πâ‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
                  foregroundColor: Colors.white,
                ),
                child: const Text('‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç'),
              ),
            ),
          ],
        );
      }).toList(),
    );
  }

  // -----------------------------------------------------
  // 3. FUNCTION: SHOW EDIT DIALOG
  // -----------------------------------------------------
void _showEditDialog(Map<String, dynamic> user) {
  // Key ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Form Validation ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô Dialog
  final GlobalKey<FormState> _dialogFormKey = GlobalKey<FormState>();

  final TextEditingController firstNameCtrl = TextEditingController(text: user['first_name']);
  final TextEditingController lastNameCtrl = TextEditingController(text: user['last_name']);
  final TextEditingController emailCtrl = TextEditingController(text: user['email']);
  final TextEditingController studentIdCtrl = TextEditingController(text: user['student_id'] ?? ''); 
  
  String selectedRole = user['role']; 

  final List<String> roleOptions = [
    '‡∏ô‡∏¥‡∏™‡∏¥‡∏ï', 
    '‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å', 
    '‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå', 
    'user', 
    'admin'
  ];
  
  // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ñ‡πâ‡∏≤‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÇ‡∏´‡∏•‡∏î‡∏°‡∏≤‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
  if (!roleOptions.contains(selectedRole)) {
    selectedRole = roleOptions.first; 
  }

  showDialog(
    context: context,
    builder: (BuildContext context) {
      return AlertDialog(
        title: const Text('‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ'),
        content: SingleChildScrollView(
          child: Form( // üö® ‡πÄ‡∏û‡∏¥‡πà‡∏° Form
            key: _dialogFormKey, // üö® ‡∏Å‡∏≥‡∏´‡∏ô‡∏î Key
            child: ListBody(
              children: <Widget>[
                // ... Fields for first_name, last_name, email ...
                TextFormField(
                  controller: firstNameCtrl, 
                  decoration: const InputDecoration(labelText: '‡∏ä‡∏∑‡πà‡∏≠'),
                  validator: (value) => (value == null || value.isEmpty) ? '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠' : null,
                ),
                TextFormField(
                  controller: lastNameCtrl, 
                  decoration: const InputDecoration(labelText: '‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•'),
                  validator: (value) => (value == null || value.isEmpty) ? '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•' : null,
                ),
                TextFormField(
                  controller: emailCtrl, 
                  decoration: const InputDecoration(labelText: '‡∏≠‡∏µ‡πÄ‡∏°‡∏•'),
                  validator: (value) => (value == null || value.isEmpty) ? '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏≠‡∏µ‡πÄ‡∏°‡∏•' : null,
                ),
                
                const SizedBox(height: 10),
                
                // Dropdown ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Role
                StatefulBuilder(
                  builder: (BuildContext context, StateSetter setState) {
                    return Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        DropdownButtonFormField<String>(
                          value: selectedRole,
                          decoration: const InputDecoration(labelText: '‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó'),
                          items: roleOptions.map((String value) { 
                            return DropdownMenuItem<String>(
                              value: value,
                              child: Text(value),
                            );
                          }).toList(),
                          onChanged: (String? newValue) {
                            if (newValue != null) {
                              setState(() {
                                selectedRole = newValue;
                                // üí° ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó ‡πÉ‡∏´‡πâ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏¥‡∏™‡∏¥‡∏ï
                                // ‡∏ñ‡πâ‡∏≤‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà '‡∏ô‡∏¥‡∏™‡∏¥‡∏ï' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ Server ‡∏£‡∏±‡∏ö NULL
                                if (newValue != '‡∏ô‡∏¥‡∏™‡∏¥‡∏ï') {
                                  studentIdCtrl.clear();
                                }
                              });
                            }
                          },
                        ),
                        
                        const SizedBox(height: 10),

                        // üö® TextFormField ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏¥‡∏™‡∏¥‡∏ï
                        TextFormField(
                          controller: studentIdCtrl, 
                          decoration: InputDecoration(
                            labelText: '‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏¥‡∏™‡∏¥‡∏ï',
                            // üí° ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏ñ‡πâ‡∏≤‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà '‡∏ô‡∏¥‡∏™‡∏¥‡∏ï'
                            fillColor: selectedRole == '‡∏ô‡∏¥‡∏™‡∏¥‡∏ï' ? Colors.transparent : Colors.grey.shade100,
                            filled: selectedRole != '‡∏ô‡∏¥‡∏™‡∏¥‡∏ï',
                          ),
                          // üö® Validation Logic: ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏Å‡∏£‡∏≠‡∏Å‡∏ñ‡πâ‡∏≤‡∏£‡∏±‡∏ö‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó '‡∏ô‡∏¥‡∏™‡∏¥‡∏ï'
                          validator: (value) {
                            if (selectedRole == '‡∏ô‡∏¥‡∏™‡∏¥‡∏ï' && (value == null || value.isEmpty)) {
                              return '‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏¥‡∏™‡∏¥‡∏ï‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó "‡∏ô‡∏¥‡∏™‡∏¥‡∏ï"';
                            }
                            return null;
                          },
                          // üö® ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ñ‡πâ‡∏≤‡∏£‡∏±‡∏ö‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡∏≠‡∏∑‡πà‡∏ô
                          enabled: selectedRole == '‡∏ô‡∏¥‡∏™‡∏¥‡∏ï', 
                        ),
                      ],
                    );
                  },
                ),
              ],
            ),
          ),
        ),
        actions: <Widget>[
          TextButton(
            child: const Text('‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å'),
            onPressed: () {
              Navigator.of(context).pop();
            },
          ),
          ElevatedButton(
            child: const Text('‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å', style: TextStyle(color: Colors.white)),
            onPressed: () {
              // üö® ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Validation ‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
              if (_dialogFormKey.currentState!.validate()) {
                Navigator.of(context).pop();
                _updateUser(
                  user['user_id'].toString(), 
                  firstNameCtrl.text,
                  lastNameCtrl.text,
                  emailCtrl.text,
                  studentIdCtrl.text, // ‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á ('') ‡∏ñ‡πâ‡∏≤‡∏ñ‡∏π‡∏Å‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡πà‡∏≤
                  selectedRole,
                );
              }
            },
            style: ElevatedButton.styleFrom(
              backgroundColor: Colors.green,
            ),
          ),
        ],
      );
    },
  );
}

  // -----------------------------------------------------
  // 4. API: UPDATE USER
  // -----------------------------------------------------
  Future<void> _updateUser(
    String userId,
    String firstName,
    String lastName,
    String email,
    String studentId,
    String role,
  ) async {
    try {
      final url = Uri.parse('$API_BASE_URL/users-admin/$userId'); // API ‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
      final response = await http.put(
        url,
        headers: {'Content-Type': 'application/json'},
        body: json.encode({
          'first_name': firstName,
          'last_name': lastName,
          'email': email,
          'student_id': studentId,
          'role': role,
        }),
      );

      if (response.statusCode == 200) {
        // ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡∏°‡∏≤‡πÅ‡∏™‡∏î‡∏á
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à')),
        );
        _fetchUsers(); // ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á
      } else {
        // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Error response
        String errorMessage = '‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: Status Code ${response.statusCode}';
        
        try {
          // üö® ‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™ JSON ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
          if (response.body.isNotEmpty) {
            final responseBody = json.decode(response.body);
            // ‡πÉ‡∏ä‡πâ message ‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
            errorMessage = '‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${responseBody['message'] ?? errorMessage}';
          }
        } catch (e) {
          // ‡∏ñ‡πâ‡∏≤ Body ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà JSON (‡πÄ‡∏ä‡πà‡∏ô 'Internal Server Error' ‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤)
          errorMessage = '‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: Status Code ${response.statusCode}. ' + 
                         '‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Console Server: ${response.body.isNotEmpty ? response.body : '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö'}';
        }

        _showErrorDialog(errorMessage);
      }
    } catch (e) {
      _showErrorDialog(
        '‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÑ‡∏î‡πâ: $e',
      );
    }
  }

  // Helper function ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á Error Dialog
  void _showErrorDialog(String message) {
    showDialog(
      context: context,
      builder: (context) => ErrorDialogPage(
        message: message,
      ),
    );
  }
}