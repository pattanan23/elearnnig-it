// lib/AdminUserManagementPage.dart

import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';
import 'package:e_learning_it/admin/error_dialog_page.dart'; // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö path
import 'navbar_admin.dart'; // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö path
import 'drawer_admin.dart'; // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö path

// **NOTE:** ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏î‡πâ‡∏ß‡∏¢ Base URL ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
const String API_BASE_URL = 'http://localhost:3006/api'; 

class UserManagementPage extends StatefulWidget {
  final String userName;
  final String userId;

  const UserManagementPage({
    super.key,
    required this.userName,
    required this.userId,
  });

  @override
  State<UserManagementPage> createState() => _UserManagementPageState();
}

class _UserManagementPageState extends State<UserManagementPage> {
  // -----------------------------------------------------
  // STATE MANAGEMENT
  // -----------------------------------------------------
  List<dynamic> _allUsers = []; 
  List<dynamic> _filteredUsers = []; 
  bool _isLoading = true;
  String _selectedRole = '‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î'; // üí° ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏õ‡πá‡∏ô '‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î'
  String _searchQuery = ''; 

  // Role Options ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô UI Tabs (‡πÄ‡∏û‡∏¥‡πà‡∏° '‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î')
  final Map<String, String> _roleOptions = {
    '‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î': '‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î', // üí° ‡πÅ‡∏ó‡πá‡∏ö‡πÉ‡∏´‡∏°‡πà
    '‡∏ô‡∏¥‡∏™‡∏¥‡∏ï': '‡∏ô‡∏¥‡∏™‡∏¥‡∏ï', 
    '‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå': '‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå', 
    '‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å': '‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å', 
  };
  
  // Role Options ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô Edit Dialog 
  final List<String> _dialogRoleOptions = [
    '‡∏ô‡∏¥‡∏™‡∏¥‡∏ï', 
    '‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡∏†‡∏≤‡∏¢‡∏ô‡∏≠‡∏Å', 
    '‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå'
  ];

  @override
  void initState() {
    super.initState();
    _fetchUsers();
  }
  
  // -----------------------------------------------------
  // DATA AND FILTERING LOGIC
  // -----------------------------------------------------
  
  // ‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ï‡∏≤‡∏° Role ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å (‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å)
  void _filterUsersByRole(String role) {
    setState(() {
      _selectedRole = role;
      _filterAndSearchUsers(); // üéØ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Å‡∏£‡∏≠‡∏á‡∏´‡∏•‡∏±‡∏Å
    });
  }

  // üí° ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Å‡∏£‡∏≠‡∏á‡∏´‡∏•‡∏±‡∏Å‡∏ó‡∏µ‡πà‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á Role Filter ‡πÅ‡∏•‡∏∞ Search Query
  void _filterAndSearchUsers() {
    setState(() {
      // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
      Iterable<dynamic> currentFiltered = _allUsers;
      
      // 1. ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏° Role ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å (‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà '‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î')
      if (_selectedRole != '‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î') {
        currentFiltered = currentFiltered
            .where((user) => user['role'] == _selectedRole);
      }
      
      // 2. ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏° Search Query
      if (_searchQuery.isNotEmpty) {
        final query = _searchQuery;
        currentFiltered = currentFiltered.where((user) {
          final fullName = '${user['first_name']} ${user['last_name']}'.toLowerCase();
          final email = user['email']?.toLowerCase() ?? '';
          
          return fullName.contains(query) || email.contains(query);
        });
      }

      _filteredUsers = currentFiltered.toList();
    });
  }


  // API: ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  Future<void> _fetchUsers() async {
    setState(() {
      _isLoading = true;
    });

    try {
      final url = Uri.parse('$API_BASE_URL/users-admin'); 
      final response = await http.get(url);

      if (response.statusCode == 200) {
        final List<dynamic> fetchedUsers = json.decode(response.body);
        setState(() {
          _allUsers = fetchedUsers;
          // üéØ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Å‡∏£‡∏≠‡∏á/‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏´‡∏•‡∏±‡∏Å‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
          _filterAndSearchUsers(); 
        });
      } else {
        String errorMessage = '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: Status Code ${response.statusCode}';
        if (response.body.isNotEmpty) {
            final responseBody = json.decode(response.body);
            errorMessage = responseBody['message'] ?? errorMessage;
        }
        _showErrorDialog(errorMessage);
      }
    } catch (e) {
      _showErrorDialog(
        '‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÑ‡∏î‡πâ: $e',
      );
    } finally {
      setState(() {
        _isLoading = false;
      });
    }
  }


  // -----------------------------------------------------
  // UI: MAIN BUILD METHOD
  // -----------------------------------------------------
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: NavbarAdminPage(
        userName: widget.userName,
        userId: widget.userId,
      ),
      drawer: DrawerAdminPage(
        userName: widget.userName,
        userId: widget.userId,
      ),
      body: Container(
        color: const Color(0xFFF0F2F5), // ‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏ó‡∏≤‡∏≠‡πà‡∏≠‡∏ô
        padding: const EdgeInsets.all(20.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            // ‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏±‡∏ß: ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
            _buildHeader(),
            const SizedBox(height: 20),
            
            // üí° ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ä‡πà‡∏≠‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
            _buildSearchBar(), 
            
            // ‡∏™‡πà‡∏ß‡∏ô Role Tabs
            _buildRoleTabs(),
            const SizedBox(height: 10),

            // ‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞ Loading State
            Expanded(
              child: _buildBodyContent(),
            ),
          ],
        ),
      ),
    );
  }

  // -----------------------------------------------------
  // UI COMPONENTS
  // -----------------------------------------------------
  
  Widget _buildHeader() {
    return const Row(
      children: [
        Icon(
          Icons.person, 
          color: Color(0xFF4CAF50), 
          size: 32,
        ),
        SizedBox(width: 10),
        Text(
          '‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ',
          style: TextStyle(
            fontSize: 24,
            fontWeight: FontWeight.bold,
            color: Color(0xFF333333),
          ),
        ),
      ],
    );
  }

  // üí° ‡∏ä‡πà‡∏≠‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ (Search Bar)
  Widget _buildSearchBar() {
    return Padding(
      padding: const EdgeInsets.only(bottom: 10.0),
      child: TextField(
        decoration: InputDecoration(
          hintText: '‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏à‡∏≤‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏µ‡πÄ‡∏°‡∏•...',
          prefixIcon: const Icon(Icons.search, color: Colors.grey),
          border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(10),
            borderSide: BorderSide.none,
          ),
          filled: true,
          fillColor: Colors.white,
          contentPadding: const EdgeInsets.symmetric(vertical: 0, horizontal: 15),
        ),
        onChanged: (value) {
          setState(() {
            _searchQuery = value.toLowerCase();
            _filterAndSearchUsers(); 
          });
        },
      ),
    );
  }


  Widget _buildRoleTabs() {
    return SingleChildScrollView( 
      scrollDirection: Axis.horizontal,
      child: Row(
        children: _roleOptions.keys.map((roleKey) {
          final isSelected = _selectedRole == roleKey;
          return Padding(
            padding: const EdgeInsets.only(right: 10),
            child: ElevatedButton(
              onPressed: () => _filterUsersByRole(roleKey),
              style: ElevatedButton.styleFrom(
                backgroundColor: isSelected ? const Color(0xFF4CAF50) : Colors.white,
                foregroundColor: isSelected ? Colors.white : Colors.grey.shade600,
                elevation: 0,
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(20),
                  side: BorderSide(
                    color: isSelected ? const Color(0xFF4CAF50) : Colors.grey.shade400,
                  ),
                ),
                padding: const EdgeInsets.symmetric(horizontal: 20, vertical: 10),
              ),
              child: Text(roleKey, style: const TextStyle(fontWeight: FontWeight.bold)),
            ),
          );
        }).toList(),
      ),
    );
  }
  
  // üí° Body Content
  Widget _buildBodyContent() {
    if (_isLoading) {
      return const Center(child: CircularProgressIndicator());
    }

    if (_filteredUsers.isEmpty) {
      final roleText = _selectedRole == '‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î' ? '‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î' : '‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó "$_selectedRole"';
      return Center(
        child: Text('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö$roleText',
            style: const TextStyle(fontSize: 16, color: Colors.grey)),
      );
    }
    
    return Container(
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(10),
        boxShadow: [
          BoxShadow(
            color: Colors.grey.withOpacity(0.1),
            spreadRadius: 1,
            blurRadius: 5,
            offset: const Offset(0, 3),
          ),
        ],
      ),
      child: SingleChildScrollView( 
        scrollDirection: Axis.horizontal, 
        child: ConstrainedBox( 
          constraints: BoxConstraints(minWidth: MediaQuery.of(context).size.width - 40), 
          child: SingleChildScrollView( 
            scrollDirection: Axis.vertical,
            child: _buildDataTable(),
          ),
        ),
      ),
    );
  }
  
  // üí° Data Table
  Widget _buildDataTable() {
    // üí° ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô (‡∏°‡∏µ 3 ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏´‡∏•‡∏±‡∏Å + 1 ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç)
    List<DataColumn> columns = [
        DataColumn(label: Container(width: 150, alignment: Alignment.centerLeft, child: const Text('‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ', style: TextStyle(fontWeight: FontWeight.bold, color: Colors.black)))),
        DataColumn(label: Container(width: 200, alignment: Alignment.centerLeft, child: const Text('‡∏≠‡∏µ‡πÄ‡∏°‡∏•', style: TextStyle(fontWeight: FontWeight.bold, color: Colors.black)))),
    ];
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó ‡∏ñ‡πâ‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å '‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î'
    if (_selectedRole == '‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î') {
        columns.add(DataColumn(label: Container(width: 80, alignment: Alignment.centerLeft, child: const Text('‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó', style: TextStyle(fontWeight: FontWeight.bold, color: Colors.black)))));
    }
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏¥‡∏™‡∏¥‡∏ï ‡∏ñ‡πâ‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å '‡∏ô‡∏¥‡∏™‡∏¥‡∏ï'
    if (_selectedRole == '‡∏ô‡∏¥‡∏™‡∏¥‡∏ï') {
        columns.add(DataColumn(label: Container(width: 100, alignment: Alignment.centerLeft, child: const Text('‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏¥‡∏™‡∏¥‡∏ï', style: TextStyle(fontWeight: FontWeight.bold, color: Colors.black)))));
    }
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    columns.add(const DataColumn(label: Text('‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•', style: TextStyle(fontWeight: FontWeight.bold, color: Colors.black))));


    return DataTable(
      dataRowMinHeight: 50, 
      dataRowMaxHeight: 60,
      headingRowColor: MaterialStateProperty.all(Colors.grey.shade50),
      columnSpacing: 20.0, 
      columns: columns, // ‡πÉ‡∏ä‡πâ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ columns ‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ß‡πâ
      rows: _filteredUsers.map<DataRow>((user) {
        final fullName = '${user['first_name']} ${user['last_name']}';
        
        List<DataCell> cells = [
            DataCell(SizedBox(width: 150, child: Text(fullName, overflow: TextOverflow.ellipsis))),
            DataCell(SizedBox(width: 200, child: Text(user['email'], overflow: TextOverflow.ellipsis))),
        ];
        
        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ã‡∏•‡∏•‡πå‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó ‡∏ñ‡πâ‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å '‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î'
        if (_selectedRole == '‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î') {
            cells.add(
                DataCell(SizedBox(width: 80, child: Text(user['role'] ?? '-', overflow: TextOverflow.ellipsis)))
            );
        }

        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ã‡∏•‡∏•‡πå‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏¥‡∏™‡∏¥‡∏ï ‡∏ñ‡πâ‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å '‡∏ô‡∏¥‡∏™‡∏¥‡∏ï'
        if (_selectedRole == '‡∏ô‡∏¥‡∏™‡∏¥‡∏ï') {
            cells.add(
                DataCell(SizedBox(width: 100, child: Text(user['student_id'] ?? '-', overflow: TextOverflow.ellipsis)))
            );
        }
        
        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        cells.add(
            DataCell(
                Center( 
                    child: IconButton(
                        icon: const Icon(Icons.edit, color: Colors.redAccent), 
                        onPressed: () => _showEditDialog(user),
                    ),
                ),
            )
        );

        return DataRow(cells: cells);
      }).toList(),
    );
  }

  // -----------------------------------------------------
  // FUNCTION: EDIT DIALOG
  // -----------------------------------------------------
  void _showEditDialog(Map<String, dynamic> user) {
    final GlobalKey<FormState> _dialogFormKey = GlobalKey<FormState>();

    final TextEditingController firstNameCtrl = TextEditingController(text: user['first_name']);
    final TextEditingController lastNameCtrl = TextEditingController(text: user['last_name']);
    final TextEditingController emailCtrl = TextEditingController(text: user['email']);
    final TextEditingController studentIdCtrl = TextEditingController(text: user['student_id'] ?? ''); 
    
    String selectedRole = user['role']; 
    
    if (!_dialogRoleOptions.contains(selectedRole)) {
      selectedRole = _dialogRoleOptions.first; 
    }

    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: const Text('‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ'),
          content: SingleChildScrollView(
            child: Form( 
              key: _dialogFormKey, 
              child: ListBody(
                children: <Widget>[
                  TextFormField(
                    controller: firstNameCtrl, 
                    decoration: const InputDecoration(labelText: '‡∏ä‡∏∑‡πà‡∏≠'),
                    validator: (value) => (value == null || value.isEmpty) ? '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠' : null,
                  ),
                  TextFormField(
                    controller: lastNameCtrl, 
                    decoration: const InputDecoration(labelText: '‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•'),
                    validator: (value) => (value == null || value.isEmpty) ? '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•' : null,
                  ),
                  TextFormField(
                    controller: emailCtrl, 
                    decoration: const InputDecoration(labelText: '‡∏≠‡∏µ‡πÄ‡∏°‡∏•'),
                    validator: (value) => (value == null || value.isEmpty) ? '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏≠‡∏µ‡πÄ‡∏°‡∏•' : null,
                  ),
                  
                  const SizedBox(height: 10),
                  
                  // Dropdown ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Role
                  StatefulBuilder(
                    builder: (BuildContext context, StateSetter setState) {
                      return Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          DropdownButtonFormField<String>(
                            value: selectedRole,
                            decoration: const InputDecoration(labelText: '‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó'),
                            items: _dialogRoleOptions.map((String value) { 
                              return DropdownMenuItem<String>(
                                value: value,
                                child: Text(value),
                              );
                            }).toList(),
                            onChanged: (String? newValue) {
                              if (newValue != null) {
                                setState(() {
                                  selectedRole = newValue;
                                  if (newValue != '‡∏ô‡∏¥‡∏™‡∏¥‡∏ï') {
                                    studentIdCtrl.clear();
                                  }
                                });
                              }
                            },
                          ),
                          
                          const SizedBox(height: 10),

                          // TextFormField ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏¥‡∏™‡∏¥‡∏ï
                          TextFormField(
                            controller: studentIdCtrl, 
                            decoration: InputDecoration(
                              labelText: '‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏¥‡∏™‡∏¥‡∏ï',
                              fillColor: selectedRole == '‡∏ô‡∏¥‡∏™‡∏¥‡∏ï' ? Colors.transparent : Colors.grey.shade100,
                              filled: selectedRole != '‡∏ô‡∏¥‡∏™‡∏¥‡∏ï',
                            ),
                            validator: (value) {
                              if (selectedRole == '‡∏ô‡∏¥‡∏™‡∏¥‡∏ï' && (value == null || value.isEmpty)) {
                                return '‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏¥‡∏™‡∏¥‡∏ï‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó "‡∏ô‡∏¥‡∏™‡∏¥‡∏ï"';
                              }
                              return null;
                            },
                            enabled: selectedRole == '‡∏ô‡∏¥‡∏™‡∏¥‡∏ï', 
                          ),
                        ],
                      );
                    },
                  ),
                ],
              ),
            ),
          ),
          actions: <Widget>[
            TextButton(
              child: const Text('‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å'),
              onPressed: () {
                Navigator.of(context).pop();
              },
            ),
            ElevatedButton(
              child: const Text('‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å', style: TextStyle(color: Colors.white)),
              onPressed: () {
                if (_dialogFormKey.currentState!.validate()) {
                  Navigator.of(context).pop();
                  _updateUser(
                    user['user_id'].toString(), 
                    firstNameCtrl.text,
                    lastNameCtrl.text,
                    emailCtrl.text,
                    studentIdCtrl.text, 
                    selectedRole,
                  );
                }
              },
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.green,
              ),
            ),
          ],
        );
      },
    );
  }

  // -----------------------------------------------------
  // API: UPDATE USER
  // -----------------------------------------------------
  Future<void> _updateUser(
    String userId,
    String firstName,
    String lastName,
    String email,
    String studentId,
    String role,
  ) async {
    try {
      final url = Uri.parse('$API_BASE_URL/users-admin/$userId'); 
      final response = await http.put(
        url,
        headers: {'Content-Type': 'application/json'},
        body: json.encode({
          'first_name': firstName,
          'last_name': lastName,
          'email': email,
          // ‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡πá‡∏ô null ‡∏´‡∏≤‡∏Å API ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö
          'student_id': studentId.isEmpty ? null : studentId, 
          'role': role,
        }),
      );

      if (response.statusCode == 200) {
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(content: Text('‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à')),
          );
        }
        _fetchUsers(); // ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á
      } else {
        String errorMessage = '‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: Status Code ${response.statusCode}';
        try {
          if (response.body.isNotEmpty) {
            final responseBody = json.decode(response.body);
            errorMessage = '‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${responseBody['message'] ?? errorMessage}';
          }
        } catch (e) {
          errorMessage = '‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: Status Code ${response.statusCode}. ' + 
                          '‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Console Server: ${response.body.isNotEmpty ? response.body : '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö'}';
        }
        if (mounted) {
          _showErrorDialog(errorMessage);
        }
      }
    } catch (e) {
      if (mounted) {
        _showErrorDialog(
          '‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÑ‡∏î‡πâ: $e',
        );
      }
    }
  }

  // -----------------------------------------------------
  // HELPER FUNCTION
  // -----------------------------------------------------
  void _showErrorDialog(String message) {
    showDialog(
      context: context,
      builder: (context) => ErrorDialogPage(
        message: message,
      ),
    );
  }
}