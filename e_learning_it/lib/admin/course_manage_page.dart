// lib/AdminCourseManagementPage.dart

import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';
// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö path ‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏µ‡πâ‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
import 'package:e_learning_it/admin/error_dialog_page.dart'; 
import 'navbar_admin.dart'; 
import 'drawer_admin.dart'; 

// **NOTE:** ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏î‡πâ‡∏ß‡∏¢ Base URL ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
const String API_BASE_URL = 'http://localhost:3006/api'; 

class CourseManagePage extends StatefulWidget {
  final String userName;
  final String userId;

  const CourseManagePage({
    super.key,
    required this.userName,
    required this.userId,
  });

  @override
  State<CourseManagePage> createState() => _CourseManagePageState();
}

class _CourseManagePageState extends State<CourseManagePage> {
  // -----------------------------------------------------
  // STATE MANAGEMENT
  // -----------------------------------------------------
  List<dynamic> _courses = [];
  List<dynamic> _filteredCourses = []; // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• (‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏Å‡∏£‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß)
  bool _isLoading = true;

  @override
  void initState() {
    super.initState();
    _fetchData();
  }

  // -----------------------------------------------------
  // API: FETCH ALL DATA (Courses)
  // -----------------------------------------------------
  Future<void> _fetchData() async {
    setState(() {
      _isLoading = true;
    });

    try {
      // 1. ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
      final coursesUrl = Uri.parse('$API_BASE_URL/courses-admin');
      final coursesResponse = await http.get(coursesUrl);

      // (‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API teachers ‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ)

      if (coursesResponse.statusCode == 200) {
        final List<dynamic> fetchedCourses = json.decode(coursesResponse.body);
        
        setState(() {
          _courses = fetchedCourses;
          _filteredCourses = fetchedCourses; 
        });
      } else {
        throw Exception('Failed to load courses. Status Code: ${coursesResponse.statusCode}');
      }
    } catch (e) {
      _showErrorDialog('‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡πÑ‡∏î‡πâ: $e');
    } finally {
      setState(() {
        _isLoading = false;
      });
    }
  }

  // -----------------------------------------------------
  // API: UPDATE COURSE (PUT /api/courses-admin/:courseId)
  // -----------------------------------------------------
  Future<void> _updateCourse(
    String courseId,
    String newCourseCode,
  ) async {
    final url = Uri.parse('$API_BASE_URL/courses-admin/$courseId');
    
    final updateData = {
      'course_code': newCourseCode,
    };

    try {
      final response = await http.put(
        url,
        headers: {'Content-Type': 'application/json'},
        body: json.encode(updateData),
      );

      if (response.statusCode == 200) {
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(content: Text('‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à')),
          );
        }
        _fetchData(); // ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á
      } else {
        String errorMessage = '‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: Status Code ${response.statusCode}';
        
        try {
          if (response.body.isNotEmpty) {
            final responseBody = json.decode(response.body);
            errorMessage = '‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${responseBody['message'] ?? errorMessage}';
          }
        } catch (e) {
          errorMessage = '‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: Status Code ${response.statusCode}. ' + 
                         '‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Console Server: ${response.body.isNotEmpty ? response.body : '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö'}';
        }

        if (mounted) {
          _showErrorDialog(errorMessage);
        }
      }
    } catch (e) {
      if (mounted) {
        _showErrorDialog(
          '‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÑ‡∏î‡πâ: $e',
        );
      }
    }
  }

  // -----------------------------------------------------
  // UI: MAIN BUILD METHOD
  // -----------------------------------------------------
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: NavbarAdminPage(
        userName: widget.userName,
        userId: widget.userId,
      ),
      drawer: DrawerAdminPage(
        userName: widget.userName,
        userId: widget.userId,
      ),
      body: Container(
        color: const Color(0xFFF0F2F5), // ‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏ó‡∏≤‡∏≠‡πà‡∏≠‡∏ô
        padding: const EdgeInsets.all(20.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            // ‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏±‡∏ß: ‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
            _buildHeader(),
            const SizedBox(height: 20),
            
            // üí° ‡∏•‡∏ö _buildSearchAndAction() ‡∏≠‡∏≠‡∏Å

            // ‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞ Loading State (‡∏Ç‡∏¢‡∏≤‡∏¢‡πÄ‡∏ï‡πá‡∏°‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà)
            Expanded(
              child: _buildBodyContent(),
            ),
          ],
        ),
      ),
    );
  }
  
  // -----------------------------------------------------
  // UI COMPONENTS
  // -----------------------------------------------------

  Widget _buildHeader() {
    return const Row(
      children: [
        // üí° Icon ‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
        Icon(
          Icons.book, 
          color: Color(0xFF4CAF50), 
          size: 32,
        ),
        SizedBox(width: 10),
        Text(
          '‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡πÄ‡∏£‡∏µ‡∏¢‡∏ô',
          style: TextStyle(
            fontSize: 24,
            fontWeight: FontWeight.bold,
            color: Color(0xFF333333),
          ),
        ),
      ],
    );
  }

  // üí° ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á: ‡πÉ‡∏ä‡πâ LayoutBuilder ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ç‡∏¢‡∏≤‡∏¢‡πÄ‡∏ï‡πá‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á
  Widget _buildBodyContent() {
    if (_isLoading) {
      return const Center(child: CircularProgressIndicator());
    }

    if (_filteredCourses.isEmpty) {
      return Center(
        child: Text('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≠‡∏£‡πå‡∏™',
            style: const TextStyle(fontSize: 16, color: Colors.grey)),
      );
    }
    
    // üí° Container ‡∏™‡∏µ‡∏Ç‡∏≤‡∏ß‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏á‡∏≤‡∏Ñ‡∏£‡∏≠‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á
    return Container(
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(10),
        boxShadow: [
          BoxShadow(
            color: Colors.grey.withOpacity(0.1),
            spreadRadius: 1,
            blurRadius: 5,
            offset: const Offset(0, 3),
          ),
        ],
      ),
      // üí° LayoutBuilder ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ó‡∏£‡∏≤‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏°‡∏µ
      child: LayoutBuilder(
        builder: (context, constraints) {
          return SingleChildScrollView(
            scrollDirection: Axis.vertical,
            child: ConstrainedBox(
              // üí° ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
              constraints: BoxConstraints(minWidth: constraints.maxWidth),
              // üí° ‡∏•‡∏ö Column ‡∏ó‡∏µ‡πà‡∏Ñ‡∏£‡∏≠‡∏ö DataTable ‡∏≠‡∏≠‡∏Å ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ Pagination ‡πÅ‡∏•‡πâ‡∏ß
              child: _buildDataTable(),
            ),
          );
        },
      ),
    );
  }
  
  // üí° ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á: ‡πÉ‡∏ä‡πâ Expanded ‡πÉ‡∏ô DataColumn
  Widget _buildDataTable() {
    return DataTable(
      // üí° ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡πâ‡∏¢‡∏∑‡∏î‡∏ï‡∏≤‡∏° ConstrainedBox
      columnSpacing: 12.0, 
      dataRowMinHeight: 50, 
      dataRowMaxHeight: 60,
      headingRowColor: MaterialStateProperty.all(Colors.grey.shade50),
      // üí° ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏¢‡∏∑‡∏î‡πÄ‡∏ï‡πá‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á
      columns: const [
        // üí° ‡πÉ‡∏ä‡πâ Expanded ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏¢‡∏∑‡∏î‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà
        DataColumn(label: Expanded(child: Text('‡∏£‡∏´‡∏±‡∏™‡∏ß‡∏¥‡∏ä‡∏≤', style: TextStyle(fontWeight: FontWeight.bold, color: Colors.black)))),
        DataColumn(label: Expanded(child: Text('‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏¥‡∏ä‡∏≤', style: TextStyle(fontWeight: FontWeight.bold, color: Colors.black)))),
        DataColumn(label: Expanded(child: Text('‡∏ú‡∏π‡πâ‡∏™‡∏≠‡∏ô/‡∏ú‡∏π‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á', style: TextStyle(fontWeight: FontWeight.bold, color: Colors.black)))),
        // ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏¢‡∏≤‡∏¢‡πÄ‡∏ï‡πá‡∏°
        DataColumn(label: Text('‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•', style: TextStyle(fontWeight: FontWeight.bold, color: Colors.black))),
      ],
      rows: _filteredCourses.map<DataRow>((course) {
        final instructorName = course['instructor_name'] ?? '-';
        // ‡πÉ‡∏ä‡πâ course['course_name'] ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡∏¥‡∏ä‡∏≤
        final courseName = course['course_name'] ?? '-';
        
        return DataRow(
          cells: [
            DataCell(Text(course['course_code'] ?? '-')),
            DataCell(Text(courseName)), 
            DataCell(Text(instructorName)),
            DataCell(
              // üí° ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏õ‡∏∏‡πà‡∏° "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç" ‡πÄ‡∏õ‡πá‡∏ô Icon (‡∏ï‡∏≤‡∏°‡∏£‡∏π‡∏õ image_3094f7.png)
              Center( 
                child: IconButton(
                  icon: const Icon(Icons.edit, color: Colors.redAccent), 
                  onPressed: () => _showEditCourseDialog(course),
                ),
              ),
            ),
          ],
        );
      }).toList(),
    );
  }
  
  // üí° ‡∏•‡∏ö _buildPagination() ‡∏≠‡∏≠‡∏Å

  // -----------------------------------------------------
  // FUNCTION: EDIT DIALOG & UTILITY
  // -----------------------------------------------------
  void _showEditCourseDialog(Map<String, dynamic> course) {
    final courseCodeController = TextEditingController(text: course['course_code'] ?? '');
    
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: Text('‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏£‡∏´‡∏±‡∏™‡∏ß‡∏¥‡∏ä‡∏≤‡∏Ç‡∏≠‡∏á ID: ${course['course_id']}'),
          content: SingleChildScrollView(
            child: ListBody(
              children: <Widget>[
                // ‡∏£‡∏´‡∏±‡∏™‡∏ß‡∏¥‡∏ä‡∏≤ (Course Code)
                TextFormField(
                  controller: courseCodeController,
                  decoration: const InputDecoration(labelText: '‡∏£‡∏´‡∏±‡∏™‡∏ß‡∏¥‡∏ä‡∏≤ (Course Code)'),
                ),
                const SizedBox(height: 20),
              ],
            ),
          ),
          actions: <Widget>[
            TextButton(
              child: const Text('‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å'),
              onPressed: () {
                Navigator.of(context).pop();
              },
            ),
            ElevatedButton(
              child: const Text('‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å', style: TextStyle(color: Colors.white)),
              onPressed: () {
                if (courseCodeController.text.isNotEmpty) {
                  _updateCourse(
                    course['course_id'].toString(),
                    courseCodeController.text, 
                  );
                  Navigator.of(context).pop();
                } else {
                  _showErrorDialog('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏ß‡∏¥‡∏ä‡∏≤');
                }
              },
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.green,
              ),
            ),
          ],
        );
      },
    );
  }

  void _showErrorDialog(String message) {
    showDialog(
      context: context,
      builder: (context) => ErrorDialogPage(message: message), 
    );
  }
}