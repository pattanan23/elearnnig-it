// course_search_widget.dart

import 'package:flutter/material.dart';
import 'dart:convert';
import 'package:http/http.dart' as http;
import 'dart:async'; 
import 'dart:io'; 
import 'dart:typed_data'; // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö utf8.decode
// üí° ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç: ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ Course Model 
import 'package:e_learning_it/student_outsiders/course/course_detail_page.dart'; // <<< ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Path ‡∏ô‡∏µ‡πâ

// ‡∏Å‡∏≥‡∏´‡∏ô‡∏î Base URL ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
const String _baseUrl = 'http://localhost:3006/api';

// ------------------------------------------------------------------
// 1. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏£‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏≤ (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç)
// ------------------------------------------------------------------
Future<List<Course>> searchCourses(String query) async {
  final encodedQuery = Uri.encodeComponent(query);
  final url = '$_baseUrl/search-courses?query=$encodedQuery'; 
  
  try {
    final response = await http.get(Uri.parse(url));

    if (response.statusCode == 200) {
      // ‡πÉ‡∏ä‡πâ utf8.decode ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
      final List<dynamic> courseJson = json.decode(utf8.decode(response.bodyBytes));
      
      if (courseJson.isEmpty) {
        return [];
      }
      
      final List<Course> courses = courseJson.map((json) => Course.fromJson(json)).toList();
      
      // üí° [FIX] ‡πÅ‡∏õ‡∏•‡∏á courseId ‡πÄ‡∏õ‡πá‡∏ô int ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏à‡∏£‡∏¥‡∏á (‡∏°‡∏≤‡∏Å‡πÑ‡∏õ‡∏ô‡πâ‡∏≠‡∏¢)
      courses.sort((a, b) {
          final int courseIdB = int.tryParse(b.courseId) ?? 0;
          final int courseIdA = int.tryParse(a.courseId) ?? 0;
          
          return courseIdB.compareTo(courseIdA); // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏à‡∏≤‡∏Å‡∏°‡∏≤‡∏Å‡πÑ‡∏õ‡∏ô‡πâ‡∏≠‡∏¢ (DESCENDING)
      }); 
      
      return courses;
    } else {
      // ‡πÅ‡∏™‡∏î‡∏á Response Body ‡πÉ‡∏ô Error ‡πÄ‡∏û‡∏∑‡πà‡∏≠ Debug ‡∏á‡πà‡∏≤‡∏¢‡∏Ç‡∏∂‡πâ‡∏ô
      throw Exception('Failed to search courses. Status: ${response.statusCode}, Response: ${utf8.decode(response.bodyBytes)}');
    }
  } on SocketException {
    throw Exception('Connection failed. Please check your network or server URL.');
  } catch (e) {
    throw Exception('An unexpected error occurred during search or JSON parsing: ${e.toString()}');
  }
}

// ------------------------------------------------------------------
// 2. Widget ‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ä‡πà‡∏≠‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
// ------------------------------------------------------------------
class CourseSearchWidget extends StatefulWidget {
  final String userName;
  final String userId;
  final Widget Function(
    BuildContext, {
    required String title,
    required Future<List<Course>> futureCourses,
    required String userName,
    required String userId,
  }) buildCourseSection;
  final Future<List<Course>> initialFutureCourses;

  const CourseSearchWidget({
    Key? key,
    required this.userName,
    required this.userId,
    required this.buildCourseSection,
    required this.initialFutureCourses,
  }) : super(key: key);

  @override
  _CourseSearchWidgetState createState() => _CourseSearchWidgetState();
}

class _CourseSearchWidgetState extends State<CourseSearchWidget> {
  final TextEditingController _searchController = TextEditingController();
  Future<List<Course>>? _futureCourses; 
  String _currentQuery = ''; 

  // ------------------------------------------------------------------
  // 3. Init State (‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô)
  // ------------------------------------------------------------------
  @override
  void initState() {
    super.initState();
    _futureCourses = widget.initialFutureCourses;
    // Listener ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏õ‡∏∏‡πà‡∏° Clear ‡πÅ‡∏™‡∏î‡∏á/‡∏´‡∏≤‡∏¢ ‡πÑ‡∏î‡πâ
    _searchController.addListener(() {
      setState(() {});
    });
  }

  // ------------------------------------------------------------------
  // 4. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
  // ------------------------------------------------------------------
  void _performSearch(String query) {
    final trimmedQuery = query.trim();
    
    // üí° ‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç: ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏Å setState ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï _futureCourses 
    setState(() {
      _currentQuery = trimmedQuery;
      _futureCourses = trimmedQuery.isEmpty
          ? widget.initialFutureCourses // ‡∏ñ‡πâ‡∏≤‡∏ß‡πà‡∏≤‡∏á ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ Future ‡πÄ‡∏î‡∏¥‡∏°‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
          : searchCourses(trimmedQuery); // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ Query ‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
    });
  }

  // ------------------------------------------------------------------
  // 5. Build Method
  // ------------------------------------------------------------------
  @override
  Widget build(BuildContext context) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        // 1. ‡∏ä‡πà‡∏≠‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
        Padding(
          padding: const EdgeInsets.symmetric(vertical: 8.0),
          child: TextField(
            controller: _searchController,
            decoration: InputDecoration(
              hintText: '‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏£‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏≤ (‡πÄ‡∏ä‡πà‡∏ô S001, Python Programming)',
              border: OutlineInputBorder(
                borderRadius: BorderRadius.circular(10.0),
                borderSide: const BorderSide(color: Color(0xFF2E7D32)),
              ),
              focusedBorder: OutlineInputBorder(
                borderRadius: BorderRadius.circular(10.0),
                borderSide: const BorderSide(color: Color(0xFF2E7D32), width: 2.0),
              ),
              contentPadding: const EdgeInsets.symmetric(horizontal: 10, vertical: 10),
              suffixIcon: _searchController.text.isNotEmpty
                ? IconButton(
                    icon: const Icon(Icons.clear, color: Colors.grey),
                    onPressed: () {
                      _searchController.clear();
                      _performSearch(''); // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
                    },
                  )
                : null,
            ),
            // ‡πÉ‡∏ä‡πâ onSubmitted ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î Enter/Done
            onSubmitted: _performSearch, 
            onChanged: (value) {
              // ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ onChanged ‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏Å setState({}) 
              // ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ listener ‡πÉ‡∏ô initState() ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
            },
          ),
        ),
        const SizedBox(height: 24),

        // 2. ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
        widget.buildCourseSection(
          context,
          title: _currentQuery.isEmpty
              ? '‡∏£‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏≤' 
              : '‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö: \"${_currentQuery}\"', 
          futureCourses: _futureCourses!, // ‡πÉ‡∏ä‡πâ Future ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏•‡πâ‡∏ß
          userName: widget.userName,
          userId: widget.userId,
        ),
      ],
    );
  }

  @override
  void dispose() {
    _searchController.dispose();
    super.dispose();
  }
}