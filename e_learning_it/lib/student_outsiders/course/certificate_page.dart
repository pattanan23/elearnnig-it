import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';
import 'package:intl/intl.dart';
import 'package:url_launcher/url_launcher.dart'; 


// ----------------------------------------------------------------------
// üí° ‡∏Ñ‡∏•‡∏≤‡∏™: ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏∏‡∏í‡∏¥‡∏ö‡∏±‡∏ï‡∏£ (Mapping Data)
// ----------------------------------------------------------------------
class CertificateData {
  final String userName;
  final String subjectName; // ‡∏ä‡∏∑‡πà‡∏≠‡∏£‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏≤‡∏¢‡πà‡∏≠‡∏¢
  final String courseName; // ‡∏ä‡∏∑‡πà‡∏≠‡∏£‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏≤‡∏´‡∏•‡∏±‡∏Å
  final String issueDate; // ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏Å‡∏ß‡∏∏‡∏í‡∏¥‡∏ö‡∏±‡∏ï‡∏£ (‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö PDF)

  CertificateData({
    required this.userName,
    required this.subjectName,
    required this.courseName,
    required this.issueDate,
  });

  // Factory method ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á Object ‡∏à‡∏≤‡∏Å JSON
  factory CertificateData.fromJson(Map<String, dynamic> json) {
    // ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤ API ‡∏™‡πà‡∏á firstName ‡πÅ‡∏•‡∏∞ lastName ‡∏°‡∏≤
    final String fullName = '${json['firstName'] ?? ''} ${json['lastName'] ?? ''}'.trim();
    return CertificateData(
      userName: fullName,
      subjectName: json['subjectName'] ?? '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏≤‡∏¢‡πà‡∏≠‡∏¢',
      courseName: json['courseName'] ?? '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏≤‡∏´‡∏•‡∏±‡∏Å',
      issueDate: json['issueDate'] ?? '',
    );
  }
}

// ----------------------------------------------------------------------
// üèÜ CERTIFICATE WIDGET
// ----------------------------------------------------------------------
class CertificatePage extends StatefulWidget {
  final String courseName;
  final String courseId; 
  final String userId; 

  const CertificatePage({
    super.key,
    required this.courseName,
    required this.courseId, 
    required this.userId, 
  });

  @override
  State<CertificatePage> createState() => _CertificatePageState();
}

class _CertificatePageState extends State<CertificatePage> {
  // üí° ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  CertificateData? _certData;
  bool _isLoading = true;
  String? _error;
  
  // ‡∏™‡∏µ‡∏´‡∏•‡∏±‡∏Å
  final Color primaryColor = const Color(0xFF03A96B); 
  // ‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô URL ‡∏ô‡∏µ‡πâ‡∏ï‡∏≤‡∏°‡∏™‡∏†‡∏≤‡∏û‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°‡∏à‡∏£‡∏¥‡∏á
  final String _apiUrlBase = 'http://localhost:3006/api'; 


  @override
  void initState() {
    super.initState();
    Intl.defaultLocale = 'th'; 
    _fetchCertificateData(); 
  }

  // ----------------------------------------------------------------------
  // üìê FUNCTION: ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ç‡∏ô‡∏≤‡∏î‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡πÅ‡∏ö‡∏ö Responsive
  // ‡∏à‡∏∞‡∏•‡∏î‡∏Ç‡∏ô‡∏≤‡∏î font ‡∏•‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡πÄ‡∏•‡πá‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 600px ‡πÇ‡∏î‡∏¢‡∏°‡∏µ minScale ‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ç‡∏ô‡∏≤‡∏î‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î
  // ----------------------------------------------------------------------
  double _responsiveFontSize(double baseSize, {double minScale = 0.7}) {
    final screenWidth = MediaQuery.of(context).size.width;
    // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î 600.0 ‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏∏‡∏î‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ baseSize ‡πÄ‡∏ï‡πá‡∏°‡∏ó‡∏µ‡πà
    const double referenceWidth = 600.0; 
    
    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì scale factor ‡πÅ‡∏•‡∏∞‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ scale ‡πÄ‡∏•‡πá‡∏Å‡∏Å‡∏ß‡πà‡∏≤ minScale
    double scale = (screenWidth / referenceWidth).clamp(minScale, 1.0);
    
    return baseSize * scale;
  }


  // ----------------------------------------------------------------------
  // üì• FUNCTION: ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏ß‡∏∏‡∏í‡∏¥‡∏ö‡∏±‡∏ï‡∏£‡πÄ‡∏õ‡πá‡∏ô PDF
  // ----------------------------------------------------------------------
  Future<void> _downloadCertificatePdf() async {
    final downloadUrl = '$_apiUrlBase/certificates/pdf/${widget.userId}/${widget.courseId}';
    final Uri uri = Uri.parse(downloadUrl);

    if (await canLaunchUrl(uri)) {
      await launchUrl(uri, mode: LaunchMode.externalApplication);
    } else {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏¥‡∏î‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á')),
        );
      }
    }
  }


  // ----------------------------------------------------------------------
  // üíæ API: ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏Å‡∏ß‡∏∏‡∏í‡∏¥‡∏ö‡∏±‡∏ï‡∏£ (‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡πÑ‡∏ß‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö PDF)
  // ----------------------------------------------------------------------
  Future<void> _saveIssueDateIfNeeded(String currentIssueDate) async {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤‡πÅ‡∏•‡∏∞‡∏Ñ‡πà‡∏≤ 'null' ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏ï‡∏£‡∏¥‡∏á
    if (currentIssueDate.isEmpty || currentIssueDate.toLowerCase() == 'null') {
      final String today = DateFormat('yyyy-MM-dd').format(DateTime.now());
      final String url = '$_apiUrlBase/certificates/save'; 

      try {
        final response = await http.post(
          Uri.parse(url),
          headers: {'Content-Type': 'application/json'},
          body: json.encode({
            'userId': widget.userId,
            'courseId': widget.courseId,
            'issueDate': today,
          }),
        );

        if (response.statusCode == 200) {
          if (mounted) {
            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô State ‡∏î‡πâ‡∏ß‡∏¢‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÉ‡∏´‡∏°‡πà
            if (_certData != null) {
              setState(() {
                _certData = CertificateData(
                  userName: _certData!.userName,
                  subjectName: _certData!.subjectName,
                  courseName: _certData!.courseName,
                  issueDate: today, // ‡πÉ‡∏ä‡πâ today ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
                );
              });
              // ignore: use_build_context_synchronously
              ScaffoldMessenger.of(context).showSnackBar(
                const SnackBar(content: Text('‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏Å‡∏ß‡∏∏‡∏í‡∏¥‡∏ö‡∏±‡∏ï‡∏£‡πÅ‡∏•‡πâ‡∏ß (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á PDF)')),
              );
            }
          }
        } else {
          // ‡πÉ‡∏ä‡πâ print ‡πÅ‡∏ó‡∏ô logging ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏á‡πà‡∏≤‡∏¢
          print('Failed to save issue date: ${response.body}');
        }
      } catch (e) {
        print('Error saving issue date: $e');
      }
    }
  }

  // ----------------------------------------------------------------------
  // üöÄ API: ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏∏‡∏í‡∏¥‡∏ö‡∏±‡∏ï‡∏£ (‡∏£‡∏ß‡∏°‡∏ñ‡∏∂‡∏á issueDate)
  // ----------------------------------------------------------------------
  Future<void> _fetchCertificateData() async {
    setState(() {
      _isLoading = true;
      _error = null;
    });

    final url = '$_apiUrlBase/certificates/${widget.userId}/${widget.courseId}';

    try {
      final response = await http.get(Uri.parse(url));

      if (response.statusCode == 200) {
        final data = json.decode(response.body);
        final certData = CertificateData.fromJson(data); 
        
        setState(() {
          _certData = certData; // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏•‡∏á‡πÉ‡∏ô State
        });

        // üí° ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ‡∏´‡∏≤‡∏Å‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏ß‡∏∏‡∏í‡∏¥‡∏ö‡∏±‡∏ï‡∏£ (‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á PDF)
        await _saveIssueDateIfNeeded(certData.issueDate); 

      } else if (response.statusCode == 404) {
          setState(() {
            _error = '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏∏‡∏í‡∏¥‡∏ö‡∏±‡∏ï‡∏£‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•';
          });
      } else {
        setState(() {
          _error = 'Failed to load certificate data (Status: ${response.statusCode})';
        });
      }
    } catch (e) {
      // ‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î Network 
      setState(() {
        _error = 'Network error: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÑ‡∏î‡πâ';
      });
    } finally {
      setState(() {
        _isLoading = false;
      });
    }
  }

  // ----------------------------------------------------------------------
  // üé® UI/BUILD METHOD (‡πÉ‡∏ä‡πâ Responsive Font Sizes ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà)
  // ----------------------------------------------------------------------
  @override
  Widget build(BuildContext context) {
    
    // 1. ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Loading ‡πÅ‡∏•‡∏∞ Error 
    if (_isLoading) {
      return Scaffold(
        appBar: AppBar(title: const Text('‡∏ß‡∏∏‡∏í‡∏¥‡∏ö‡∏±‡∏ï‡∏£', style: TextStyle(color: Colors.white)), backgroundColor: primaryColor),
        body: const Center(child: CircularProgressIndicator()),
      );
    }

    if (_error != null || _certData == null) {
      return Scaffold(
        appBar: AppBar(title: const Text('‡∏ß‡∏∏‡∏í‡∏¥‡∏ö‡∏±‡∏ï‡∏£', style: TextStyle(color: Colors.white)), backgroundColor: primaryColor),
        body: Center(
          child: Padding(
            padding: const EdgeInsets.all(20.0),
            child: Text(
              _error ?? '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏∏‡∏í‡∏¥‡∏ö‡∏±‡∏ï‡∏£',
              textAlign: TextAlign.center,
              style: const TextStyle(color: Colors.red, fontSize: 16),
            ),
          ),
        ),
      );
    }
    
    // 2. üí° ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ç‡∏ô‡∏≤‡∏î Responsive ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Text ‡πÅ‡∏•‡∏∞ Container (FIX: ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Responsive)
    final double bodyTextSize = _responsiveFontSize(20, minScale: 0.85);
    final double nameTextSize = _responsiveFontSize(34, minScale: 0.7);
    final double courseNameSize = _responsiveFontSize(26, minScale: 0.75);
    final double subjectNameSize = _responsiveFontSize(18, minScale: 0.85);
    final double buttonTextSize = _responsiveFontSize(18, minScale: 0.9);
    
    // üí° ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏Å‡∏£‡∏≠‡∏ö‡∏ß‡∏∏‡∏í‡∏¥‡∏ö‡∏±‡∏ï‡∏£‡πÉ‡∏´‡πâ Responsive (‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 300, ‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 700)
    final double certContainerWidth = MediaQuery.of(context).size.width.clamp(300.0, 700.0);
    

    return Scaffold(
      appBar: AppBar(
        title: const Text('‡∏ß‡∏∏‡∏í‡∏¥‡∏ö‡∏±‡∏ï‡∏£', style: TextStyle(color: Colors.white)),
        backgroundColor: primaryColor,
        iconTheme: const IconThemeData(color: Colors.white), 
      ),
      body: SingleChildScrollView(
        child: Center(
          child: Padding(
            padding: const EdgeInsets.all(20.0),
            child: Column(
              children: [
                // 1. ‡∏Å‡∏£‡∏≠‡∏ö‡∏ß‡∏∏‡∏í‡∏¥‡∏ö‡∏±‡∏ï‡∏£ (Container ‡∏´‡∏•‡∏±‡∏Å)
                Container(
                  padding: const EdgeInsets.symmetric(horizontal: 20.0, vertical: 40.0),
                  width: certContainerWidth, // üéØ ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÅ‡∏ö‡∏ö Responsive
                  decoration: BoxDecoration(
                    border: Border.all(color: primaryColor, width: 5),
                    borderRadius: BorderRadius.circular(15),
                    boxShadow: const [
                      BoxShadow(color: Colors.black26, blurRadius: 10, offset: Offset(0, 5))
                    ],
                    color: Colors.white,
                  ),
                  child: Column(
                    children: <Widget>[
                      // ‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏±‡∏ß: ‡πÇ‡∏•‡πÇ‡∏Å‡πâ
                      Row(
                        mainAxisAlignment: MainAxisAlignment.center, 
                        children: [
                          // üéØ ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡πÇ‡∏•‡πÇ‡∏Å‡πâ‡∏ï‡∏≤‡∏°‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡∏î‡πâ‡∏ß‡∏¢
                          Image.asset(
                            'assets/images/logo4.png', // ‚ö†Ô∏è **‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô Path ‡∏ô‡∏µ‡πâ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì**
                            height: 80 * (MediaQuery.of(context).size.width / 600).clamp(0.7, 1.0),
                          ), 
                        ],
                      ),
                      const SizedBox(height: 30),
                      
                      // ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á
                      Text(
                        '‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏ô‡∏µ‡∏¢‡∏ö‡∏±‡∏ï‡∏£‡∏ô‡∏µ‡πâ‡πÉ‡∏´‡πâ‡πÑ‡∏ß‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏ß‡πà‡∏≤',
                        style: TextStyle(fontSize: bodyTextSize, color: Colors.black54), // üéØ ‡πÉ‡∏ä‡πâ bodyTextSize
                        textAlign: TextAlign.center,
                      ),
                      const SizedBox(height: 10),

                      // ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏ß‡∏∏‡∏í‡∏¥‡∏ö‡∏±‡∏ï‡∏£
                      Text(
                        _certData!.userName,
                        style: TextStyle(
                            fontSize: nameTextSize, // üéØ ‡πÉ‡∏ä‡πâ nameTextSize
                            fontWeight: FontWeight.bold,
                            color: primaryColor,
                            fontStyle: FontStyle.italic,
                            decorationColor: primaryColor,
                            decorationThickness: 2),
                        textAlign: TextAlign.center,
                      ),
                      const SizedBox(height: 10),

                      // ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏ö‡∏£‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏≤
                      Text(
                        '‡πÑ‡∏î‡πâ‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏ö‡∏£‡∏°‡∏£‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏≤',
                        style: TextStyle(fontSize: bodyTextSize, color: Colors.black54), // üéØ ‡πÉ‡∏ä‡πâ bodyTextSize
                        textAlign: TextAlign.center,
                      ),
                      const SizedBox(height: 10),

                      // ‡∏ä‡∏∑‡πà‡∏≠‡∏£‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏≤
                      Text(
                        _certData!.courseName,
                        style: TextStyle(
                            fontSize: courseNameSize, // üéØ ‡πÉ‡∏ä‡πâ courseNameSize
                            fontWeight: FontWeight.bold,
                            color: primaryColor),
                        textAlign: TextAlign.center,
                      ),
                      const SizedBox(height: 5),

                      // ‡∏ä‡∏∑‡πà‡∏≠‡∏£‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏≤‡∏¢‡πà‡∏≠‡∏¢
                      Text(
                        '(${_certData!.subjectName})',
                        style: TextStyle(fontSize: subjectNameSize, color: primaryColor), // üéØ ‡πÉ‡∏ä‡πâ subjectNameSize
                        textAlign: TextAlign.center,
                      ),
                      const SizedBox(height: 70), // ‡πÄ‡∏ß‡πâ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á
                      
                      // üìù (‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô/‡∏ú‡∏π‡πâ‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£ - ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà)

                    ],
                  ),
                ), // ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î Container ‡∏Å‡∏£‡∏≠‡∏ö‡∏ß‡∏∏‡∏í‡∏¥‡∏ö‡∏±‡∏ï‡∏£
                
                const SizedBox(height: 30), // ‡πÄ‡∏ß‡πâ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏ß‡∏∏‡∏í‡∏¥‡∏ö‡∏±‡∏ï‡∏£‡∏Å‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏°

                // 2. üì• ‡∏õ‡∏∏‡πà‡∏°‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î PDF (‡∏≠‡∏¢‡∏π‡πà‡∏ô‡∏≠‡∏Å Container)
                ElevatedButton.icon(
                  onPressed: _certData != null ? _downloadCertificatePdf : null,
                  icon: const Icon(Icons.download, color: Colors.white),
                  label: Text('‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏ß‡∏∏‡∏í‡∏¥‡∏ö‡∏±‡∏ï‡∏£ PDF', style: TextStyle(fontSize: buttonTextSize, color: Colors.white)), // üéØ ‡πÉ‡∏ä‡πâ buttonTextSize
                  style: ElevatedButton.styleFrom(
                    backgroundColor: Colors.red[800], 
                    padding: EdgeInsets.symmetric(
                      horizontal: _responsiveFontSize(30, minScale: 0.9), // üéØ ‡πÉ‡∏ä‡πâ Responsive Padding
                      vertical: _responsiveFontSize(15, minScale: 0.9) // üéØ ‡πÉ‡∏ä‡πâ Responsive Padding
                    ),
                    shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(10)),
                  ),
                ),
                const SizedBox(height: 40),
              ],
            ),
          ),
        ),
      ),
    );
  }
}
