import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';

import 'package:e_learning_it/student_outsiders/course/vdo_page.dart';


class Course {
  final String courseId;
  final String userId;
  final String courseCode;
  final String courseName;
  final String shortDescription;
  final String description;
  final String objective;
  final String professorName;
  final String imageUrl;
  final List<Lesson> lessons;

  Course({
    required this.courseId,
    required this.userId,
    required this.courseCode,
    required this.courseName,
    required this.shortDescription,
    required this.description,
    required this.objective,
    required this.professorName,
    required this.imageUrl,
    required this.lessons,
  });

  factory Course.fromJson(Map<String, dynamic> json) {
    var lessonsList = json['lessons'] as List<dynamic>? ?? [];
    List<Lesson> parsedLessons = lessonsList.map((lessonJson) {
      return Lesson(
        id: int.tryParse(lessonJson['lesson_id']?.toString() ?? '0') ?? 0,
        videoName: lessonJson['video_name'] ?? '',
        videoDescription: lessonJson['video_description'] ?? '',
        videoUrl: lessonJson['video_url'],
        pdfUrl: lessonJson['pdf_url'],
      );
    }).toList();

    return Course(
      courseId: json['course_id']?.toString() ?? '',
      userId: json['user_id']?.toString() ?? '',
      courseCode: json['course_code']?.toString() ?? '',
      courseName: json['course_name'] ?? '',
      shortDescription: json['short_description'] ?? '',
      description: json['description'] ?? '',
      objective: json['objective'] ?? '',
      professorName: json['professor_name'] ?? '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏',
      imageUrl: json['image_url'] ?? 'https://placehold.co/600x400.png',
      lessons: parsedLessons,
    );
  }
}

// üí° NEW CLASS: ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏ß‡∏°‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Ç‡∏≠‡∏á Future 2 ‡∏ï‡∏±‡∏ß
class CourseProgressData {
  final Map<String, dynamic> progress;
  final bool hasRated;

  CourseProgressData({
    required this.progress,
    required this.hasRated,
  });
}


class CourseDetailPage extends StatefulWidget {
  final Course course;
  final String userName;
  final String userId;

  const CourseDetailPage({
    Key? key,
    required this.course,
    required this.userName,
    required this.userId,
  }) : super(key: key);

  @override
  State<CourseDetailPage> createState() => _CourseDetailPageState();
}

class _CourseDetailPageState extends State<CourseDetailPage> {
  // ‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô IP ‡πÅ‡∏•‡∏∞ Port ‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ IP/Port ‡∏ô‡∏µ‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Node.js ‡πÑ‡∏î‡πâ‡∏à‡∏£‡∏¥‡∏á
  final String _apiUrlBase = 'http://localhost:3006/api'; 
  
  late Future<CourseProgressData> _courseStatusFuture;

  @override
  void initState() {
    super.initState();
    _courseStatusFuture = _fetchCombinedCourseStatus();
  }

  // üí° [CRITICAL FIX] ‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏à‡∏≤‡∏Å course_ratings ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö Node.js API (Endpoint 8)
  Future<bool> _fetchCourseRatingStatus() async {
    try {
      // üéØ URL ‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö Node.js Endpoint ‡∏ó‡∏µ‡πà 8: /api/check_user_rating/:userId/:courseId
      final url = '$_apiUrlBase/check_user_rating/${widget.userId}/${widget.course.courseId}';
      
      final response = await http.get(
        Uri.parse(url),
        headers: {'Content-Type': 'application/json'},
      );

      // Node.js API ‡∏™‡πà‡∏á 200 ‡∏ñ‡πâ‡∏≤‡∏û‡∏ö rating ‡πÅ‡∏•‡∏∞ 404 ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö
      if (response.statusCode == 200) {
        // Status 200 = User ‡πÑ‡∏î‡πâ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß
        return true; 
      } else if (response.statusCode == 404) {
        // Status 404 = User ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏ô‡∏µ‡πâ
        return false; 
      } 
      
      // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Status Code ‡∏≠‡∏∑‡πà‡∏ô‡πÜ (‡πÄ‡∏ä‡πà‡∏ô 500)
      return false;

    } catch (e) {
      print('Network error fetching rating status: $e');
      return false;
    }
  }

  // üí° NEW FUNCTION: ‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤ + ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
  Future<CourseProgressData> _fetchCombinedCourseStatus() async {
    final progress = await _fetchLastProgress();
    final hasRated = await _fetchCourseRatingStatus();
    return CourseProgressData(progress: progress, hasRated: hasRated);
  }

  // üí° MODIFIED FUNCTION: ‡∏î‡∏∂‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î 
  Future<Map<String, dynamic>> _fetchLastProgress() async {
    Map<String, dynamic> defaultProgress = {
      'lessonId': 0,
      'savedSeconds': 0,
      'courseStatus': '‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÉ‡∏´‡∏°‡πà',
    };

    if (widget.course.lessons.isEmpty) return defaultProgress;

    try {
      final url = '$_apiUrlBase/get_progress/${widget.userId}/${widget.course.courseId}';
      final response = await http.get(
        Uri.parse(url),
        headers: {'Content-Type': 'application/json'},
      );

      final data = json.decode(response.body);

      if (response.statusCode == 200) {
        final progress = data['progress'] ?? defaultProgress;

        final lessonId = progress['lessonId'] as int?;
        if (lessonId != null && widget.course.lessons.any((l) => l.id == lessonId)) {
            return progress;
        }
        return defaultProgress;

      } else if (response.statusCode == 404) {
        return defaultProgress;
      } else {
        print('Error fetching progress: ${response.statusCode}, Body: ${response.body}');
        return defaultProgress;
      }
    } catch (e) {
      print('Network error fetching progress: $e');
      return defaultProgress;
    }
  }

  // üí° FIXED FUNCTION: ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡πà‡∏á‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á API
  Future<void> _submitRating(int rating) async {
    try {
      // üéØ URL ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö Node.js Endpoint ‡∏ó‡∏µ‡πà 7: /api/rate_course
      final response = await http.post(
        Uri.parse('$_apiUrlBase/rate_course'),
        headers: {'Content-Type': 'application/json'},
        body: json.encode({
          'courseId': widget.course.courseId,
          'userId': widget.userId,
          'rating': rating,
          'review_text': '', 
        }),
      );

      if (response.statusCode == 200) {
        // ignore: use_build_context_synchronously
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô "‡∏ó‡∏ö‡∏ó‡∏ß‡∏ô"')),
        );
        // ‚úÖ [CRITICAL FIX] ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å setState ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏Å FutureBuilder ‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
        setState(() {
          _courseStatusFuture = _fetchCombinedCourseStatus(); // ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä Future
        }); 
      } else {
        // ignore: use_build_context_synchronously
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÑ‡∏î‡πâ. Status: ${response.statusCode}')),
        );
      }
    } catch (e) {
      print('Network error submitting rating: $e');
      // ignore: use_build_context_synchronously
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('üåê ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠')),
      );
    }
  }

  // üí° FIXED FUNCTION: ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á Dialog ‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
  void _showRatingDialog(BuildContext context) async {
    int _currentRating = 0;

    final int? selectedRating = await showDialog<int>( 
      context: context,
      builder: (BuildContext dialogContext) {
        return StatefulBuilder(
          builder: (context, setState) {
            return AlertDialog(
              title: const Text('‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ñ‡∏≠‡∏£‡πå‡∏™'),
              content: Column(
                mainAxisSize: MainAxisSize.min,
                children: [
                  const Text('‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏ô‡∏µ‡πâ‡∏Å‡∏µ‡πà‡∏î‡∏≤‡∏ß?'),
                  const SizedBox(height: 10),
                  Row(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: List.generate(5, (index) {
                      return IconButton(
                        icon: Icon(
                          Icons.star,
                          color: index < _currentRating ? Colors.amber : Colors.grey,
                        ),
                        onPressed: () {
                          setState(() {
                            _currentRating = index + 1;
                          });
                        },
                      );
                    }),
                  ),
                ],
              ),
              actions: <Widget>[
                TextButton(
                  onPressed: () => Navigator.of(context).pop(null), 
                  child: const Text('‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å'),
                ),
                ElevatedButton(
                  onPressed: _currentRating > 0
                      ? () {
                          Navigator.of(context).pop(_currentRating); 
                        }
                      : null,
                  child: const Text('‡∏™‡πà‡∏á‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô'),
                ),
              ],
            );
          },
        );
      }
    );
    
    // 2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (selectedRating != null && selectedRating > 0) {
      // 3. ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡πà‡∏á‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô ‡∏ã‡∏∂‡πà‡∏á‡∏à‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏Å setState ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô
      await _submitRating(selectedRating);
    }
  }

  // üí° FIXED FUNCTION: ‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠
  void _navigateToVideoPage(BuildContext context, Map<String, dynamic> progress) async {
    int startLessonIndex = 0; 
    int startSavedSeconds = progress['savedSeconds'] ?? 0;
    String status = progress['courseStatus'] ?? '‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÉ‡∏´‡∏°‡πà';

    if (widget.course.lessons.isEmpty) return;

    final lastLessonId = progress['lessonId'] as int?;
    final lastLessonIndex = lastLessonId != null
        ? widget.course.lessons.indexWhere((l) => l.id == lastLessonId)
        : -1;

    // ‡∏´‡∏≤‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ '‡∏ó‡∏ö‡∏ó‡∏ß‡∏ô' ‡∏´‡∏£‡∏∑‡∏≠ '‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÉ‡∏´‡∏°‡πà' ‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏µ‡πà‡∏ö‡∏ó‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÅ‡∏£‡∏Å
    if (status == '‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÉ‡∏´‡∏°‡πà' || status == '‡∏ó‡∏ö‡∏ó‡∏ß‡∏ô') {
      startLessonIndex = 0;
      startSavedSeconds = 0;
    } 
    // ‡∏´‡∏≤‡∏Å‡πÄ‡∏õ‡πá‡∏ô '‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ï‡πà‡∏≠' ‡∏´‡∏£‡∏∑‡∏≠ '‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏à‡∏ö' (‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏à‡∏ö‡∏ö‡∏ó‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢)
    else if (lastLessonIndex != -1) {
      if (status == '‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ï‡πà‡∏≠') {
        startLessonIndex = lastLessonIndex;
      } else if (status == '‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏à‡∏ö') {
        if (lastLessonIndex + 1 < widget.course.lessons.length) {
          // ‡πÑ‡∏õ‡∏ö‡∏ó‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
          startLessonIndex = lastLessonIndex + 1;
          startSavedSeconds = 0;
        } else {
          // ‡∏à‡∏ö‡∏ó‡∏∏‡∏Å‡∏ö‡∏ó‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÅ‡∏•‡πâ‡∏ß
          startLessonIndex = 0;
          startSavedSeconds = 0;
        }
      }
    } 

    await Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) => VdoPage(
          courseId: widget.course.courseId,
          userId: widget.userId,
          lessons: widget.course.lessons,
          initialLessonIndex: startLessonIndex,
          initialSavedSeconds: startSavedSeconds,
        ),
      ),
    );

    // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡∏à‡∏≤‡∏Å VdoPage ‡πÉ‡∏´‡πâ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏´‡∏ô‡πâ‡∏≤ CourseDetailPage
    setState(() {
      _courseStatusFuture = _fetchCombinedCourseStatus(); // ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä Future
    });
  }


  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(widget.course.courseName),
        backgroundColor: const Color(0xFF2E7D32),
      ),
      body: Stack(
        children: [
          SingleChildScrollView(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                // ... (‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏±‡∏ß‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£‡πÅ‡∏•‡∏∞‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û) ...
                Container(
                  height: 200,
                  width: double.infinity,
                  decoration: BoxDecoration(
                    borderRadius: const BorderRadius.vertical(bottom: Radius.circular(10)),
                    image: DecorationImage(
                      image: NetworkImage(widget.course.imageUrl),
                      fit: BoxFit.cover,
                    ),
                  ),
                  child: Align(
                    alignment: Alignment.bottomLeft,
                    child: Padding(
                      padding: const EdgeInsets.all(16.0),
                      child: Text(
                        widget.course.courseName,
                        style: const TextStyle(
                          fontSize: 24,
                          fontWeight: FontWeight.bold,
                          color: Colors.white,
                          shadows: [
                            Shadow(
                              offset: Offset(1.0, 1.0),
                              blurRadius: 3.0,
                              color: Color.fromARGB(150, 0, 0, 0),
                            ),
                          ],
                        ),
                      ),
                    ),
                  ),
                ),
                const SizedBox(height: 24),
                // ‡∏™‡πà‡∏ß‡∏ô Tabs ‡πÅ‡∏•‡∏∞‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤
                _buildTabsAndContent(context),
                const SizedBox(height: 100),
              ],
            ),
          ),

          // üí° ‡∏õ‡∏∏‡πà‡∏° "‡πÄ‡∏£‡∏¥‡πà‡∏°"
          Align(
            alignment: Alignment.bottomRight,
            child: Padding(
              padding: const EdgeInsets.only(bottom: 24.0, right: 16.0),
              child: FutureBuilder<CourseProgressData>(
                future: _courseStatusFuture, // ‡πÉ‡∏ä‡πâ Future ‡∏ï‡∏±‡∏ß‡πÉ‡∏´‡∏°‡πà
                builder: (context, snapshot) {
                  String buttonText = '‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏ô';
                  bool isButtonEnabled = true;
                  Map<String, dynamic> progressData = {'courseStatus': '‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÉ‡∏´‡∏°‡πà', 'lessonId': 0, 'savedSeconds': 0};
                  bool hasRated = false;

                  if (snapshot.connectionState == ConnectionState.waiting) {
                    buttonText = '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î...';
                    isButtonEnabled = false;
                  } else if (widget.course.lessons.isEmpty) {
                    buttonText = '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ö‡∏ó‡πÄ‡∏£‡∏µ‡∏¢‡∏ô';
                    isButtonEnabled = false;
                  } else if (snapshot.hasError) {
                    // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡πÄ‡∏ä‡πà‡∏ô API Down)
                    print('Error loading course status: ${snapshot.error}');
                    buttonText = '‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î';
                    isButtonEnabled = false;
                  } else if (snapshot.hasData) {
                    progressData = snapshot.data!.progress;
                    hasRated = snapshot.data!.hasRated; // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô

                    final status = progressData['courseStatus'];
                    final lastLessonId = progressData['lessonId'] as int?;

                    final isLastLessonInCourse = lastLessonId != null &&
                        widget.course.lessons.isNotEmpty &&
                        lastLessonId == widget.course.lessons.last.id;


                    // 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö "course_ratings": ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô "‡∏ó‡∏ö‡∏ó‡∏ß‡∏ô" ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
                    if (hasRated) { 
                      buttonText = '‡∏ó‡∏ö‡∏ó‡∏ß‡∏ô';
                    }
                    // 2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö "video_progress" (‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ "‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏à‡∏ö" + ‡∏ö‡∏ó‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢ + ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô)
                    else if (status == '‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏à‡∏ö' && isLastLessonInCourse && !hasRated) {
                      buttonText = '‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ñ‡∏≠‡∏£‡πå‡∏™';
                    }
                    // 3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö "video_progress" (‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ "‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ï‡πà‡∏≠" ‡∏´‡∏£‡∏∑‡∏≠ "‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏à‡∏ö" ‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏à‡∏ö‡∏ö‡∏ó‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢)
                    else if (status == '‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ï‡πà‡∏≠' || (status == '‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏à‡∏ö' && !isLastLessonInCourse)) {
                      buttonText = '‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ï‡πà‡∏≠';
                    } 
                    // 4. ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏ô (‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢‡∏î‡∏π‡πÄ‡∏•‡∏¢)
                    else { 
                      buttonText = '‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏ô';
                    }
                  }

                  // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î Action ‡∏Ç‡∏≠‡∏á‡∏õ‡∏∏‡πà‡∏°
                  final VoidCallback? onPressedAction;
                  if (!isButtonEnabled) {
                    onPressedAction = null;
                  } else if (buttonText == '‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ñ‡∏≠‡∏£‡πå‡∏™') {
                    onPressedAction = () => _showRatingDialog(context);
                  } else {
                    onPressedAction = () => _navigateToVideoPage(context, progressData);
                  }

                  final buttonColor = buttonText == '‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ñ‡∏≠‡∏£‡πå‡∏™'
                      ? Colors.amber[700]
                      : const Color(0xFF2E7D32);

                  return ElevatedButton(
                    onPressed: onPressedAction,
                    style: ElevatedButton.styleFrom(
                      backgroundColor: buttonColor,
                      padding: const EdgeInsets.symmetric(horizontal: 30, vertical: 16),
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(10),
                      ),
                      elevation: 5,
                    ),
                    child: Text(buttonText, style: const TextStyle(fontSize: 18, color: Colors.white)),
                  );
                },
              ),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildTabsAndContent(BuildContext context) {
    return DefaultTabController(
    length: 3,
    child: Column(
      children: [

        const TabBar(
          labelColor: const Color(0xFF2E7D32), // ‡∏™‡∏µ‡πÄ‡∏Ç‡πâ‡∏° (‡∏™‡∏µ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö AppBar)
          labelStyle: TextStyle(
            fontSize: 16,
            fontWeight: FontWeight.bold,
          ),
          unselectedLabelStyle: TextStyle(
            fontSize: 16,
            fontWeight: FontWeight.normal,
          ),

          tabs: [
            Tab(text: '‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î'),
            Tab(text: '‡∏ß‡∏∏‡∏í‡∏¥‡∏ö‡∏±‡∏ï‡∏£'),
            Tab(text: '‡∏ö‡∏ó‡πÄ‡∏£‡∏µ‡∏¢‡∏ô'),
          ],
        ),
        Container(
          height: MediaQuery.of(context).size.height * 0.7,
          child: TabBarView(
            children: [
              _buildDetailTab(),
              _buildCertificateTab(),
              _buildLessonsTab(),
            ],
          ),
        ),
      ],
    ),
  );
  }

  Widget _buildDetailTab() {
    return SingleChildScrollView(
      padding: const EdgeInsets.all(16.0),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          // ‡∏™‡πà‡∏ß‡∏ô ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£ (‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î)
          Row(
            children: [
              const Icon(Icons.menu_book, color: Color.fromARGB(255, 87, 87, 87)),
              const SizedBox(width: 8),
              Text('‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£', style: Theme.of(context).textTheme.titleLarge?.copyWith(fontWeight: FontWeight.bold)),
            ],
          ),
          const SizedBox(height: 8),
          // ‡πÉ‡∏ä‡πâ description
          SelectableText(widget.course.description, style: const TextStyle(fontSize: 16)),

          const Divider(height: 32),

          // ‡∏™‡πà‡∏ß‡∏ô ‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏õ‡∏£‡∏∞‡∏™‡∏á‡∏Ñ‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ
          Row(
            children: [
              const Icon(Icons.my_location, color: Color.fromARGB(255, 87, 87, 87)),
              const SizedBox(width: 8),
              Text('‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏õ‡∏£‡∏∞‡∏™‡∏á‡∏Ñ‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ', style: Theme.of(context).textTheme.titleLarge?.copyWith(fontWeight: FontWeight.bold)),
            ],
          ),
          const SizedBox(height: 8),
          // ‡πÉ‡∏ä‡πâ objective
          SelectableText(widget.course.objective, style: const TextStyle(fontSize: 16)),
          const SizedBox(height: 20),
        ],
      ),
    );
  }

  Widget _buildCertificateTab() {
    return const Center(
      child: Padding(
        padding: EdgeInsets.all(16.0),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Icon(Icons.badge, size: 48, color: Colors.blueGrey),
            SizedBox(height: 10),
            Text(
              '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏∏‡∏í‡∏¥‡∏ö‡∏±‡∏ï‡∏£/‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á',
              style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold)
            ),
            SizedBox(height: 5),
            Text(
              '‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏ß‡∏∏‡∏í‡∏¥‡∏ö‡∏±‡∏ï‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏à‡∏ö‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏ô‡∏µ‡πâ‡∏Ñ‡∏£‡∏ö 100% ‡πÅ‡∏•‡∏∞‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)',
              textAlign: TextAlign.center,
              style: TextStyle(fontSize: 14, color: Colors.grey)
            ),
          ],
        ),
      ),
    );
  }
  Widget _buildLessonsTab() {
    return ListView.builder(
      // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î shrinkWrap ‡πÅ‡∏•‡∏∞ physics ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÉ‡∏ô TabBarView ‡πÑ‡∏î‡πâ
      shrinkWrap: true,
      physics: const NeverScrollableScrollPhysics(),
      itemCount: widget.course.lessons.length,
      itemBuilder: (context, index) {
        final lesson = widget.course.lessons[index];
        return ListTile(
          leading: const Icon(Icons.video_library),
          title: Text('‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà ${index + 1}: ${lesson.videoName}'),
          subtitle: Text(lesson.videoDescription, maxLines: 1, overflow: TextOverflow.ellipsis),
          onTap: () {
            // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ö‡∏ó‡πÄ‡∏£‡∏µ‡∏¢‡∏ô ‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏î‡∏π‡∏ö‡∏ó‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ô‡∏±‡πâ‡∏ô‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡∏ï‡πâ‡∏ô (‡∏ó‡∏ö‡∏ó‡∏ß‡∏ô)
              _navigateToVideoPage(context, {
                'lessonId': lesson.id,
                'savedSeconds': 0,
                'courseStatus': '‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÉ‡∏´‡∏°‡πà',
              });
          },
        );
      },
    );
  }
}