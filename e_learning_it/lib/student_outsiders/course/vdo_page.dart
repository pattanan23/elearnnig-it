import 'package:flutter/material.dart';
import 'package:video_player/video_player.dart';
import 'dart:async';
import 'dart:convert';
import 'package:flutter/services.dart';
import 'package:url_launcher/url_launcher.dart';
import 'package:http/http.dart' as http;

// üí° ‡∏Ñ‡∏•‡∏≤‡∏™: ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤ (Progress Node)
class VideoProgress {
  final String courseId;
  final String userId;
  final int lessonId;
  final Duration savedPosition;
  final String status; // '‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ï‡πà‡∏≠', '‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÉ‡∏´‡∏°‡πà' ‡∏´‡∏£‡∏∑‡∏≠ '‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏à‡∏ö'

  VideoProgress({
    required this.courseId,
    required this.userId,
    required this.lessonId,
    required this.savedPosition,
    required this.status,
  });

  // ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ API (‡∏õ‡∏£‡∏±‡∏ö key ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö Node.js API)
  Map<String, dynamic> toJson() {
    return {
      'courseId': courseId,
      'userId': userId,
      'lessonId': lessonId,
      'savedSeconds': savedPosition.inSeconds, // ‡∏™‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
      'courseStatus': status,
    };
  }
}

// ‡∏Ñ‡∏•‡∏≤‡∏™ Lesson (‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á)
class Lesson {
  final int id;
  final String videoName;
  final String videoDescription;
  final String? videoUrl;
  final String? pdfUrl;

  Lesson({
    required this.id,
    required this.videoName,
    required this.videoDescription,
    this.videoUrl,
    this.pdfUrl,
  });
}

class VdoPage extends StatefulWidget {
  final String courseId;
  final String userId;
  final List<Lesson> lessons;
  final int initialLessonIndex;
  final int initialSavedSeconds;

  const VdoPage({
    Key? key,
    required this.courseId,
    required this.userId,
    required this.lessons,
    this.initialLessonIndex = 0,
    this.initialSavedSeconds = 0,
  }) : super(key: key);

  @override
  _VdoPageState createState() => _VdoPageState();
}

class _VdoPageState extends State<VdoPage> {
  late VideoPlayerController _controller;
  int _currentVideoIndex = 0;
  bool _isControllerInitialized = false;
  // üí° ‡πÉ‡∏ä‡πâ Set ‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏° Lesson Index ‡∏ó‡∏µ‡πà "‡∏î‡∏π‡∏à‡∏ö‡πÅ‡∏•‡πâ‡∏ß" (‡∏°‡∏µ courseStatus = '‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏à‡∏ö')
  final Set<int> _completedVideos = {};
  bool _isFullScreen = false;

  // üì¢ State ‡πÉ‡∏´‡∏°‡πà: ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏ô‡∏µ‡πâ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
  bool _isCourseRated = false;

  // ‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô IP ‡πÅ‡∏•‡∏∞ Port ‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
  final String _apiUrl = 'http://localhost:3006/api/save_progress';

  // üì¢ Endpoint ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á progress ‡∏Ç‡∏≠‡∏á Lesson ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
  final String _apiGetUrl = 'http://localhost:3006/api/get_progress_lesson';

  // üì¢ Endpoint ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á progress ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á Course
  final String _apiGetAllProgressUrl = 'http://localhost:3006/api/get_all_progress';

  // üì¢ Endpoint ‡πÉ‡∏´‡∏°‡πà: ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ñ‡∏≠‡∏£‡πå‡∏™ (Rate Course)
  final String _apiRateCourseUrl = 'http://localhost:3006/api/rate_course';

  // üì¢ Endpoint ‡πÉ‡∏´‡∏°‡πà: ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
  final String _apiCheckRatingUrl = 'http://localhost:3006/api/check_user_rating';


  @override
  void initState() {
    super.initState();
    _currentVideoIndex = widget.initialLessonIndex;

    // üí° [ADDED] ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤
    _checkIfUserHasRated();

    if (widget.lessons.isNotEmpty) {
      _fetchCompletedLessons(); // ‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏ó‡∏µ‡πà‡∏î‡∏π‡∏à‡∏ö‡πÅ‡∏•‡πâ‡∏ß (‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á Checkmark)
      _initializeVideoPlayer(
          _currentVideoIndex, savedSeconds: widget.initialSavedSeconds);
    }
  }

  // üí° [NEW FUNCTION] ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≠‡∏£‡πå‡∏™
  Future<void> _checkIfUserHasRated() async {
    // ‚úÖ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ Endpoint /api/check_user_rating/:userId/:courseId
    final uri = Uri.parse(
        '$_apiCheckRatingUrl/${widget.userId}/${widget.courseId}');

    try {
      final response = await http.get(uri);

      if (mounted) {
        if (response.statusCode == 200) {
          // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ 200 OK ‡∏´‡∏°‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏Ñ‡∏¢‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÅ‡∏•‡πâ‡∏ß
          setState(() {
            _isCourseRated = true;
          });
        } else if (response.statusCode == 404) {
          // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ 404 Not Found ‡∏´‡∏°‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ß‡πà‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
          setState(() {
            _isCourseRated = false;
          });
        } else {
          print(
              '‚ùå Failed to check rating status. Status: ${response.statusCode}');
        }
      }
    } catch (e) {
      print('üåê Error checking rating status: $e');
    }
  }

  // üí° [NEW FUNCTION] ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ñ‡∏≠‡∏£‡πå‡∏™
  Future<void> _rateCourse(int rating, String? reviewText) async {
    // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î reviewText ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô null ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏ï‡∏£‡∏¥‡∏á‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤
    final String? finalReviewText =
        (reviewText == null || reviewText.trim().isEmpty) ? null : reviewText;

    try {
      final response = await http.post(
        Uri.parse(_apiRateCourseUrl),
        headers: {'Content-Type': 'application/json'},
        body: json.encode({
          'courseId': widget.courseId,
          'userId': widget.userId,
          'rating': rating,
          'review_text': finalReviewText,
        }),
      );

      if (response.statusCode == 200) {
        if (mounted) {
          setState(() {
            _isCourseRated = true; // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÅ‡∏•‡πâ‡∏ß
          });
          ScaffoldMessenger.of(context).showSnackBar(
            // üí° ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ó‡∏ö‡∏ó‡∏ß‡∏ô‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
            const SnackBar(content: Text('‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å/‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!')),
          );
        }
      } else if (response.statusCode == 404) {
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(content: Text('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö Course ID ‡∏´‡∏£‡∏∑‡∏≠ User ID')),
          );
      } else {
        print('‚ùå Failed to rate course. Status: ${response.statusCode}, Body: ${response.body}');
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô: ${response.statusCode}')),
        );
      }
    } catch (e) {
      print('üåê Error rating course: $e');
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('üåê ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠')),
      );
    }
  }

  // üí° [MODIFIED FUNCTION] ‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏î‡∏π‡∏à‡∏ö‡πÅ‡∏•‡πâ‡∏ß (‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á Checkmark ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)
  Future<void> _fetchCompletedLessons() async {
    final uri = Uri.parse('$_apiGetAllProgressUrl/${widget.userId}/${widget.courseId}');
    try {
      final response = await http.get(uri);

      if (response.statusCode == 200) {
        final List<dynamic> data = json.decode(response.body);
        final Set<int> completedIndices = data
            .where((item) => item['courseStatus'] == '‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏à‡∏ö')
            .map<int>((item) {
              // Map lessonId ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÄ‡∏õ‡πá‡∏ô index ‡πÉ‡∏ô List
              return widget.lessons.indexWhere((l) => l.id == item['lessonId']);
            })
            .where((index) => index != -1) // ‡∏Å‡∏£‡∏≠‡∏á Lesson ‡∏ó‡∏µ‡πà‡∏´‡∏≤ index ‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡∏≠‡∏≠‡∏Å
            .toSet();

        if (mounted) {
          setState(() {
            _completedVideos.clear();
            // üí° [MODIFIED] ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏â‡∏û‡∏≤‡∏∞ index ‡∏ó‡∏µ‡πà‡∏î‡∏π‡∏à‡∏ö‡πÅ‡∏•‡πâ‡∏ß
            _completedVideos.addAll(completedIndices);
          });
        }
      } else {
        print('‚ùå Failed to fetch all progress. Status: ${response.statusCode}');
      }
    } catch (e) {
      print('üåê Error fetching all progress: $e');
    }
  }


  // üí° ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Lesson ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß)
  Future<int> _fetchSavedProgress(
      String courseId, String userId, int lessonId) async {
    // ‚úÖ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ Endpoint /api/get_progress_lesson/:userId/:courseId/:lessonId
    final uri =
        Uri.parse('$_apiGetUrl/$userId/$courseId/$lessonId');

    try {
      final response = await http.get(uri);

      if (response.statusCode == 200) {
        final data = json.decode(response.body);
        final int savedSeconds = data['progress']['savedSeconds'] as int? ?? 0;
        return savedSeconds;
      } else if (response.statusCode == 404) {
        return 0; // ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      } else {
        print('‚ùå Failed to fetch progress. Status: ${response.statusCode}');
        return 0;
      }
    } catch (e) {
      print('üåê Error fetching progress from API: $e');
      return 0;
    }
  }

  // üí° [MODIFIED FUNCTION] ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Controller ‡πÅ‡∏•‡∏∞‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å Timer
  void _initializeVideoPlayer(int index, {int savedSeconds = 0}) async {
    // üí° [REMOVED] ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å Timer

    if (_isControllerInitialized) {
      // üí° [IMPORTANT] ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡πÄ‡∏î‡∏¥‡∏° ‡∏Å‡πà‡∏≠‡∏ô‡∏à‡∏∞‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô
      await _saveVideoProgress();
      await _controller.dispose();
      _isControllerInitialized = false;
    }

    if (widget.lessons.isEmpty || widget.lessons[index].videoUrl == null) {
      if (mounted) {
        setState(() {
          _isControllerInitialized = false;
        });
      }
      return;
    }

    final String videoUrl = widget.lessons[index].videoUrl!;
    _controller = VideoPlayerController.networkUrl(Uri.parse(videoUrl))
      ..initialize().then((_) {
        if (mounted) {
          setState(() {
            _isControllerInitialized = true;
          });
        }

        // ‡πÉ‡∏ä‡πâ savedSeconds ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤
        if (savedSeconds > 0) {
          _controller.seekTo(Duration(seconds: savedSeconds));
        }

        _controller.play();

      }).catchError((error) {
        print('Error initializing video: $error');
        if (mounted) {
          setState(() {
            _isControllerInitialized = false;
          });
          // ignore: use_build_context_synchronously
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(content: Text('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠')),
          );
        }
      });

    _controller.addListener(() {
      if (mounted && _controller.value.isInitialized) {
        // üí° ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏ó‡∏µ‡πà‡∏à‡∏ö‡πÅ‡∏•‡πâ‡∏ß (‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏î‡∏π‡∏à‡∏ö)
        if (_controller.value.position >= _controller.value.duration &&
            _controller.value.duration > Duration.zero &&
            !_completedVideos.contains(_currentVideoIndex)) {

          _saveVideoProgress(isCompleted: true); // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏à‡∏ö‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠

          if (mounted) {
            setState(() {
              _completedVideos.add(_currentVideoIndex);
            });
          }
        }

        if (mounted) {
            setState(() {}); // ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI ‡πÄ‡∏ä‡πà‡∏ô progress bar
        }
      }
    });
  }

  // üí° ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤ (‡πÉ‡∏ä‡πâ‡∏ï‡∏≠‡∏ô‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡πÅ‡∏•‡∏∞‡∏ï‡∏≠‡∏ô‡∏≠‡∏≠‡∏Å‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)
  Future<void> _saveVideoProgress({bool isCompleted = false}) async {
    if (!mounted || widget.lessons.isEmpty) return;

    // üí° ‡∏´‡∏≤‡∏Å Controller ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å Init ‡∏´‡∏£‡∏∑‡∏≠‡∏ñ‡∏π‡∏Å Dispose ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
    if (!_isControllerInitialized) return;

    final Lesson currentLesson = widget.lessons[_currentVideoIndex];
    final Duration savedPosition = _controller.value.position;
    final Duration totalDuration = _controller.value.duration;

    String status;
    if (isCompleted || savedPosition >= totalDuration) {
      status = '‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏à‡∏ö';
    } else if (savedPosition.inSeconds > 5) { // ‡∏î‡∏π‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏Å‡∏¥‡∏ô 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
      status = '‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ï‡πà‡∏≠';
    } else {
      status = '‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÉ‡∏´‡∏°‡πà';
    }

    final VideoProgress progressNode = VideoProgress(
      courseId: widget.courseId,
      userId: widget.userId,
      lessonId: currentLesson.id,
      savedPosition: savedPosition,
      status: status,
    );

    final apiBody = progressNode.toJson();

    try {
      final response = await http.post(
        Uri.parse(_apiUrl),
        headers: {'Content-Type': 'application/json'},
        body: json.encode(apiBody),
      );

      if (response.statusCode == 200) {
        // print('‚úÖ Progress saved successfully: $status for lesson ${currentLesson.id}');
      } else {
        print('‚ùå Failed to save progress. Status: ${response.statusCode}, Body: ${response.body}');
      }
    } catch (e) {
      print('üåê Error sending progress to API: $e');
    }
  }

  // üí° [MODIFIED FUNCTION] ‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏•‡πà‡∏ô‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
  void _playVideo(int index) async {
    // üí° [REMOVED] ‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö isUnlocked

    if (_currentVideoIndex != index) {
      final Lesson newLesson = widget.lessons[index];

      // ‡∏ñ‡πâ‡∏≤‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏ñ‡∏π‡∏Å‡∏î‡∏π‡∏à‡∏ö‡πÅ‡∏•‡πâ‡∏ß (‡∏°‡∏µ checkmark) ‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å 0 ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏ö‡∏ó‡∏ß‡∏ô
      final bool isLessonCompleted = _completedVideos.contains(index);
      final int savedPosition = isLessonCompleted
          ? 0
          : await _fetchSavedProgress(
                widget.courseId, widget.userId, newLesson.id);

      if (mounted) {
        setState(() {
          _currentVideoIndex = index;
        });
      }

      // ‡∏™‡πà‡∏á savedPosition ‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡∏°‡∏≤‡πÉ‡∏´‡πâ initializer
      _initializeVideoPlayer(index, savedSeconds: savedPosition);
    }
  }

  void _seek(int seconds) {
    if (_isControllerInitialized && _controller.value.isInitialized) {
      final newPosition = _controller.value.position + Duration(seconds: seconds);
      final Duration duration = _controller.value.duration;
      Duration clampedPosition;

      if (newPosition < Duration.zero) {
        clampedPosition = Duration.zero;
      } else if (newPosition > duration) {
        clampedPosition = duration;
      } else {
        clampedPosition = newPosition;
      }

      _controller.seekTo(clampedPosition);
    }
  }

  void _setPlaybackSpeed(double speed) {
    if (_isControllerInitialized && _controller.value.isInitialized) {
      _controller.setPlaybackSpeed(speed);
    }
  }

  void _toggleFullScreen() {
    setState(() {
      _isFullScreen = !_isFullScreen;
    });

    if (_isFullScreen) {
      SystemChrome.setEnabledSystemUIMode(SystemUiMode.manual, overlays: []);
      SystemChrome.setPreferredOrientations([
        DeviceOrientation.landscapeLeft,
        DeviceOrientation.landscapeRight,
      ]);
    } else {
      SystemChrome.setEnabledSystemUIMode(SystemUiMode.manual,
          overlays: SystemUiOverlay.values);
      SystemChrome.setPreferredOrientations([
        DeviceOrientation.portraitUp,
      ]);
    }
  }

  Future<bool> _onBackPressed() async {
    if (_isFullScreen) {
      _toggleFullScreen();
      return false;
    }

    final bool? shouldPop = await showDialog<bool>(
      context: context,
      builder: (context) {
        return AlertDialog(
          title: const Text('‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏•‡∏±‡∏ö'),
          content:
              const Text('‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?'),
          actions: <Widget>[
            TextButton(
              onPressed: () => Navigator.of(context).pop(false),
              child: const Text('‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å'),
            ),
            // üí° ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏•‡∏±‡∏ö
            TextButton(
              onPressed: () => Navigator.of(context).pop(true),
              child: const Text('‡∏ï‡∏Å‡∏•‡∏á'),
            ),
          ],
        );
      },
    );

    if (shouldPop == false || shouldPop == null) {
      return false;
    }

    await _saveVideoProgress(); // üí° [KEEP] ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏Å‡πà‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö
    return true;
  }

  @override
  void dispose() {
    // üí° [REMOVED] ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å Timer
    _saveVideoProgress(); // üí° [KEEP] ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢ ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏´‡∏ô‡πâ‡∏≤‡∏ñ‡∏π‡∏Å‡∏ó‡∏≥‡∏•‡∏≤‡∏¢
    if (_isControllerInitialized) {
      _controller.dispose();
    }
    SystemChrome.setEnabledSystemUIMode(SystemUiMode.manual,
        overlays: SystemUiOverlay.values);
    SystemChrome.setPreferredOrientations([
      DeviceOrientation.portraitUp,
    ]);
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    if (_isFullScreen) {
      return Scaffold(body: _buildVideoPlayerSection(context));
    }

    return WillPopScope(
      onWillPop: _onBackPressed,
      child: Scaffold(
        appBar: AppBar(
          title: const Text('‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠'),
          backgroundColor: const Color(0xFF2E7D32),
        ),
        body: LayoutBuilder(
          builder: (context, constraints) {
            if (constraints.maxWidth < 800) {
              return SingleChildScrollView(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    _buildVideoPlayerSection(context),
                    if (widget.lessons.isNotEmpty) ...[
                      _buildCurrentVideoHeader(),
                      _buildVideoInfoAndFiles(),
                      const Divider(height: 1),
                      Padding(
                        padding: const EdgeInsets.symmetric(
                            horizontal: 16.0, vertical: 8.0),
                        child: _buildVideoLessonsList(isMobile: true),
                      ),
                    ],
                  ],
                ),
              );
            }

            return Row(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Expanded(
                  flex: 3,
                  child: SingleChildScrollView(
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        _buildVideoPlayerSection(context),
                        if (widget.lessons.isNotEmpty) ...[
                          _buildCurrentVideoHeader(),
                          _buildVideoInfoAndFiles(),

                        ],
                      ],
                    ),
                  ),
                ),
                Expanded(
                  flex: 2,
                  child: _buildVideoLessonsList(isMobile: false),
                ),
              ],
            );
          },
        ),
      ),
    );
  }

  // --- Widgets ---

  // üí° [MODIFIED WIDGET] ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏∏‡πà‡∏° Rate Course
  Widget _buildCurrentVideoHeader() {
    final currentLesson = widget.lessons[_currentVideoIndex];

    return Padding(
      padding: const EdgeInsets.only(left: 16.0, right: 16.0, top: 16.0),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            '‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà ${_currentVideoIndex + 1}: ${currentLesson.videoName}',
            style: const TextStyle(fontSize: 20, fontWeight: FontWeight.bold),
          ),
          const SizedBox(height: 16),
        
          // üí° ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°
          const SizedBox(height: 16),
          Text(
            currentLesson.videoDescription,
            style: const TextStyle(fontSize: 16, color: Colors.black87),
          ),
          const Divider(height: 32),
        ],
      ),
    );
  }

  Widget _buildVideoPlayerSection(BuildContext context) {
    return Container(
      color: Colors.black,
      width: _isFullScreen ? MediaQuery.of(context).size.width : double.infinity,
      height: _isFullScreen ? MediaQuery.of(context).size.height : 450,
      child: Stack(
        alignment: Alignment.center,
        children: <Widget>[
          if (_isControllerInitialized && _controller.value.isInitialized)
            VideoPlayer(_controller)
          else
            const Center(
                child: CircularProgressIndicator(color: Colors.white)),
          if (_isControllerInitialized && _controller.value.isInitialized)
            Positioned(
              bottom: 0,
              left: 0,
              right: 0,
              child: _buildVideoControls(),
            ),
        ],
      ),
    );
  }

 Widget _buildVideoControls() {
  if (!_isControllerInitialized || !_controller.value.isInitialized) {
    return const SizedBox.shrink();
  }

  return Container(
    color: Colors.black54,
    child: Column(
      mainAxisSize: MainAxisSize.min,
      children: [
        // 1. ‡πÅ‡∏ñ‡∏ö Progress Bar (‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤)
        VideoProgressIndicator(
          _controller,
          allowScrubbing: true,
          colors: const VideoProgressColors(
              playedColor: Colors.red, bufferedColor: Colors.white54),
        ),
        
        // 2. ‡πÅ‡∏ñ‡∏ö‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠ (‡∏õ‡∏∏‡πà‡∏°‡∏ï‡πà‡∏≤‡∏á‡πÜ)
        Padding(
          // üí° ‡∏õ‡∏£‡∏±‡∏ö Padding: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏Ç‡πâ‡∏≤‡∏á‡πÄ‡∏õ‡πá‡∏ô 16.0 ‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏î‡πâ‡∏≤‡∏ô‡πÅ‡∏ô‡∏ß‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏õ‡πá‡∏ô 4.0
          padding: const EdgeInsets.symmetric(horizontal: 16.0, vertical: 4.0), 
          child: Row(
            // üí° ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô MainAxisAlignment.start ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏õ‡∏∏‡πà‡∏°‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏´‡∏•‡∏±‡∏Å‡∏≠‡∏¢‡∏π‡πà‡∏ä‡∏¥‡∏î‡∏ã‡πâ‡∏≤‡∏¢
            mainAxisAlignment: MainAxisAlignment.start,
            children: [
              // ‡∏õ‡∏∏‡πà‡∏°‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö 10 ‡∏ß‡∏¥
              IconButton(
                icon: const Icon(Icons.replay_10, color: Colors.white, size: 28),
                onPressed: () {
                  _seek(-10);
                },
              ),
              
              // üí° ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏Ñ‡∏á‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏°
              const SizedBox(width: 15.0), 
              
              // ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏•‡πà‡∏ô/‡∏´‡∏¢‡∏∏‡∏î
              IconButton(
                icon: Icon(
                    _controller.value.isPlaying
                        ? Icons.pause
                        : Icons.play_arrow,
                    color: Colors.white,
                    // üí° ‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÇ‡∏î‡∏î‡πÄ‡∏î‡πà‡∏ô
                    size: 28), 
                onPressed: () {
                  setState(() {
                    _controller.value.isPlaying
                        ? _controller.pause()
                        : _controller.play();
                  });
                },
              ),
              
              // üí° ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏Ñ‡∏á‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏°
              const SizedBox(width: 15.0), 
              
              // ‡∏õ‡∏∏‡πà‡∏°‡∏Å‡∏£‡∏≠‡πÑ‡∏õ‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤ 10 ‡∏ß‡∏¥
              IconButton(
                icon: const Icon(Icons.forward_10, color: Colors.white, size: 28),
                onPressed: () {
                  _seek(10);
                },
              ),
              
              // üí° ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ö‡∏≠‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏õ‡∏∏‡πà‡∏°
              const SizedBox(width: 12.0), 

              // ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ö‡∏≠‡∏Å‡πÄ‡∏ß‡∏•‡∏≤
              Text(
                '${_printDuration(_controller.value.position)} / ${_printDuration(_controller.value.duration)}',
                style: const TextStyle(color: Colors.white, fontSize: 13),
              ),
              
              // Spacer ‡∏î‡∏±‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß/‡πÄ‡∏ï‡πá‡∏°‡∏à‡∏≠‡πÑ‡∏õ‡∏Ç‡∏ß‡∏≤
              const Spacer(), 

              // ‡∏õ‡∏∏‡πà‡∏°‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß/‡πÄ‡∏ï‡πá‡∏°‡∏à‡∏≠ (‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏≤‡∏á‡∏Ç‡∏ß‡∏≤)
              Row(
                children: [
                  PopupMenuButton<double>(
                    initialValue: _controller.value.playbackSpeed,
                    onSelected: _setPlaybackSpeed,
                    itemBuilder: (context) => [
                      for (final speed in [0.5, 1.0, 1.5, 2.0])
                        PopupMenuItem(
                          value: speed,
                          child: Text('${speed}x'),
                        ),
                    ],
                    child: Padding(
                      padding: const EdgeInsets.symmetric(
                          horizontal: 8.0, vertical: 8.0),
                      child: Text(
                        '${_controller.value.playbackSpeed}x',
                        style: const TextStyle(color: Colors.white, fontSize: 14),
                      ),
                    ),
                  ),
                  IconButton(
                    icon: Icon(
                        _isFullScreen ? Icons.fullscreen_exit : Icons.fullscreen,
                        color: Colors.white),
                    onPressed: _toggleFullScreen,
                  ),
                ],
              ),
            ],
          ),
        ),
      ],
    ),
  );
}

  String _printDuration(Duration duration) {
    String twoDigits(int n) => n.toString().padLeft(2, '0');
    final minutes = twoDigits(duration.inMinutes.remainder(60));
    final seconds = twoDigits(duration.inSeconds.remainder(60));
    if (duration.inHours > 0) {
      return '${twoDigits(duration.inHours)}:$minutes:$seconds';
    }
    return '$minutes:$seconds';
  }

  Widget _buildVideoLessonsList({required bool isMobile}) {
    return Padding(
      padding: EdgeInsets.all(isMobile ? 0 : 16.0),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          const Text(
            '‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ',
            style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold),
          ),
          const SizedBox(height: 10),
          // üí° ‡πÉ‡∏ä‡πâ Expanded ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÉ‡∏ô‡πÇ‡∏´‡∏°‡∏î Desktop/Tablet (isMobile: false)
          isMobile
              ? ListView.builder(
                  shrinkWrap: true,
                  physics: const NeverScrollableScrollPhysics(),
                  itemCount: widget.lessons.length,
                  itemBuilder: _buildLessonListItem,
                )
              : Expanded(
                  child: ListView.builder(
                    itemCount: widget.lessons.length,
                    itemBuilder: _buildLessonListItem,
                  ),
                ),
        ],
      ),
    );
  }

  // üí° [MODIFIED WIDGET] ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Ñ ‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏±‡∏ö UI
  Widget _buildLessonListItem(BuildContext context, int index) {
    final lesson = widget.lessons[index];
    final bool isCurrent = _currentVideoIndex == index;
    // üí° ‡∏ö‡∏ó‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÑ‡∏î‡πâ
    final bool isFinishedWatching = _completedVideos.contains(index);

    // üí° [MODIFIED] ‡πÉ‡∏ä‡πâ Card ‡πÅ‡∏•‡∏∞ ListTile ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏î‡∏π‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô
    return Card(
      margin: const EdgeInsets.symmetric(vertical: 4, horizontal: 0),
      elevation: isCurrent ? 4 : 1,
      color: isCurrent ? Colors.lightGreen.shade50 : Colors.white,
      child: ListTile(
        leading: Icon(
          isFinishedWatching
              ? Icons.check_circle_outline // ‡∏î‡∏π‡∏à‡∏ö‡πÅ‡∏•‡πâ‡∏ß (Checkmark)
              : Icons.play_circle_fill_outlined, // ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏à‡∏ö (Play Icon)
          color: isCurrent
              ? const Color(0xFF2E7D32)
              : (isFinishedWatching ? Colors.lightGreen.shade700 : Colors.grey.shade600),
        ),
        title: Text(
          '‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà ${index + 1}: ${lesson.videoName}',
          style: TextStyle(
            fontWeight: isCurrent ? FontWeight.bold : FontWeight.normal,
            color: isCurrent ? const Color(0xFF2E7D32) : Colors.black,
          ),
        ),
        subtitle:
            Text(lesson.videoDescription, maxLines: 2, overflow: TextOverflow.ellipsis),
        // üí° [MODIFIED] ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Å‡∏î‡πÑ‡∏î‡πâ‡πÄ‡∏™‡∏°‡∏≠
        onTap: () => _playVideo(index),
      ),
    );
  }

  Widget _buildVideoInfoAndFiles() {
    if (widget.lessons.isEmpty) {
      return const Center(child: Text('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡πÅ‡∏•‡∏∞‡πÑ‡∏ü‡∏•‡πå'));
    }

    final currentLesson = widget.lessons[_currentVideoIndex];

    return Padding(
      padding: const EdgeInsets.only(left: 16.0, right: 16.0, bottom: 0.0), // ‡∏•‡∏î bottom padding
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          const Text(
            '‡πÑ‡∏ü‡∏•‡πå‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô',
            style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
          ),
          const SizedBox(height: 8),
          if (currentLesson.pdfUrl != null && currentLesson.pdfUrl!.isNotEmpty)
            ListTile(
              contentPadding: EdgeInsets.zero,
              leading: const Icon(Icons.picture_as_pdf, color: Colors.red),
              title: Text(currentLesson.pdfUrl!.split('/').last),
              onTap: () async {
                final Uri uri = Uri.parse(currentLesson.pdfUrl!);
                if (await canLaunchUrl(uri)) {
                  await launchUrl(uri, mode: LaunchMode.externalApplication);
                } else {
                  // ignore: use_build_context_synchronously
                  ScaffoldMessenger.of(context).showSnackBar(
                    const SnackBar(content: Text('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡∏•‡πå PDF ‡πÑ‡∏î‡πâ')),
                  );
                }
              },
            )
          else
            const Text('‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏ô‡∏µ‡πâ'),
          const Divider(height: 16), // ‡πÄ‡∏û‡∏¥‡πà‡∏° Divider ‡∏Ñ‡∏±‡πà‡∏ô‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏Å‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏°
        ],
      ),
    );
  }
}